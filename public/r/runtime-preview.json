{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "runtime-preview",
  "type": "registry:component",
  "title": "Runtime Preview",
  "description": "A component that provides real-time preview of CLI command execution and output.",
  "dependencies": ["react"],
  "registryDependencies": ["button", "scroll-area", "tabs"],
  "files": [
    {
      "path": "registry/commandly/components/runtime-preview.tsx",
      "content": "import { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\nimport { InfoIcon } from \"lucide-react\";\nimport {\n  Parameter,\n  ParameterValue\n} from \"@/registry/commandly/lib/types/tool-editor\";\nimport { Command, Tool } from \"@/registry/commandly/lib/types/tool-editor\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger\n} from \"@/components/ui/tooltip\";\nimport React from \"react\";\n\nconst findDefaultCommand = (tool: Tool): Command | null => {\n  const defaultCommand = tool.commands.find((command) => command.isDefault);\n  if (defaultCommand) return defaultCommand;\n\n  const nameMatchCommand = tool.commands.find(\n    (command) => command.name.toLowerCase() === tool.name.toLowerCase()\n  );\n  if (nameMatchCommand) return nameMatchCommand;\n\n  return tool.commands.length > 0 ? tool.commands[0] : null;\n};\n\ninterface RuntimePreviewProps {\n  selectedCommand?: Command | null;\n  tool: Tool;\n  parameterValues: Record<string, ParameterValue>;\n  updateParameterValue: (parameterId: string, value: ParameterValue) => void;\n}\n\nexport function RuntimePreview({\n  selectedCommand: providedCommand,\n  tool,\n  parameterValues,\n  updateParameterValue\n}: RuntimePreviewProps) {\n  const selectedCommand = providedCommand ?? findDefaultCommand(tool);\n\n  const renderParameterInput = (parameter: Parameter) => {\n    const value = parameterValues[parameter.id] || parameter.defaultValue || \"\";\n\n    switch (parameter.parameterType) {\n      case \"Flag\":\n        return (\n          <div key={parameter.id} className=\"flex items-center space-x-2\">\n            <Switch\n              checked={(parameterValues[parameter.id] as boolean) || false}\n              onCheckedChange={(checked) =>\n                updateParameterValue(parameter.id, checked)\n              }\n            />\n            <Label className=\"flex-1\">\n              {parameter.name}\n              {(parameter.longFlag || parameter.shortFlag) && (\n                <span className=\"text-muted-foreground ml-1\">\n                  (\n                  {[parameter.longFlag, parameter.shortFlag]\n                    .filter(Boolean)\n                    .join(\", \")}\n                  )\n                </span>\n              )}\n              {parameter.isRequired && (\n                <span className=\"text-destructive ml-1\">*</span>\n              )}\n              <Tooltip>\n                <TooltipTrigger>\n                  <InfoIcon className=\"h-3.5 w-3.5\" />\n                </TooltipTrigger>\n                <TooltipContent>\n                  <span>{parameter.description}</span>\n                </TooltipContent>\n              </Tooltip>\n            </Label>\n            {parameter.isGlobal && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                global\n              </Badge>\n            )}\n          </div>\n        );\n\n      case \"Option\":\n        if (parameter.dataType === \"Enum\") {\n          return (\n            <div key={parameter.id} className=\"space-y-2\">\n              <Label>\n                {parameter.name}\n                {(parameter.longFlag || parameter.shortFlag) && (\n                  <span className=\"text-muted-foreground ml-1\">\n                    (\n                    {[parameter.longFlag, parameter.shortFlag]\n                      .filter(Boolean)\n                      .join(\", \")}\n                    )\n                  </span>\n                )}\n                {parameter.isRequired && (\n                  <span className=\"text-destructive ml-1\">*</span>\n                )}\n                <Tooltip>\n                  <TooltipTrigger>\n                    <InfoIcon className=\"h-3.5 w-3.5\" />\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <span>{parameter.description}</span>\n                  </TooltipContent>\n                </Tooltip>\n                {parameter.isGlobal && (\n                  <Badge variant=\"outline\" className=\"text-xs ml-2\">\n                    global\n                  </Badge>\n                )}\n              </Label>\n              <Select\n                value={value as string}\n                onValueChange={(newValue) =>\n                  updateParameterValue(parameter.id, newValue)\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select an option\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {parameter.enumValues.map((enumValue) => (\n                    <SelectItem key={enumValue.id} value={enumValue.value}>\n                      {enumValue.displayName || enumValue.value}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          );\n        } else if (parameter.dataType === \"Boolean\") {\n          return (\n            <div key={parameter.id} className=\"flex items-center space-x-2\">\n              <Switch\n                checked={value === \"true\" || value === true}\n                onCheckedChange={(checked) =>\n                  updateParameterValue(parameter.id, checked.toString())\n                }\n              />\n              <Label className=\"flex-1\">\n                {parameter.name}\n                {(parameter.longFlag || parameter.shortFlag) && (\n                  <span className=\"text-muted-foreground ml-1\">\n                    (\n                    {[parameter.longFlag, parameter.shortFlag]\n                      .filter(Boolean)\n                      .join(\", \")}\n                    )\n                  </span>\n                )}\n                {parameter.isRequired && (\n                  <span className=\"text-destructive ml-1\">*</span>\n                )}\n                <Tooltip>\n                  <TooltipTrigger>\n                    <InfoIcon className=\"h-3.5 w-3.5\" />\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <span>{parameter.description}</span>\n                  </TooltipContent>\n                </Tooltip>\n              </Label>\n              {parameter.isGlobal && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  global\n                </Badge>\n              )}\n            </div>\n          );\n        } else {\n          return (\n            <div key={parameter.id} className=\"space-y-2\">\n              <div className=\"flex\">\n                <Label className=\"flex-1\">\n                  {parameter.name}\n                  {(parameter.longFlag || parameter.shortFlag) && (\n                    <span className=\"text-muted-foreground ml-1\">\n                      (\n                      {[parameter.longFlag, parameter.shortFlag]\n                        .filter(Boolean)\n                        .join(\", \")}\n                      )\n                    </span>\n                  )}\n                  {parameter.isRequired && (\n                    <span className=\"text-destructive ml-1\">*</span>\n                  )}\n                  <Tooltip>\n                    <TooltipTrigger>\n                      <InfoIcon className=\"h-3.5 w-3.5\" />\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <span>{parameter.description}</span>\n                    </TooltipContent>\n                  </Tooltip>\n                </Label>\n                {parameter.isGlobal && (\n                  <Badge variant=\"outline\" className=\"text-xs ml-2\">\n                    global\n                  </Badge>\n                )}\n              </div>\n              <Input\n                type={parameter.dataType === \"Number\" ? \"number\" : \"text\"}\n                value={\n                  parameter.dataType == \"Number\"\n                    ? (value as number)\n                    : (value as string)\n                }\n                onChange={(e) =>\n                  updateParameterValue(parameter.id, e.target.value)\n                }\n                placeholder=\"Enter value\"\n              />\n            </div>\n          );\n        }\n\n      case \"Argument\":\n        return (\n          <div key={parameter.id} className=\"space-y-2\">\n            <Label>\n              {parameter.name}\n              {parameter.isRequired && (\n                <span className=\"text-destructive ml-1\">*</span>\n              )}\n              <Tooltip>\n                <TooltipTrigger>\n                  <InfoIcon className=\"h-3.5 w-3.5\" />\n                </TooltipTrigger>\n                <TooltipContent>\n                  <span>{parameter.description}</span>\n                </TooltipContent>\n              </Tooltip>\n              <Badge variant=\"secondary\" className=\"text-xs ml-2\">\n                {parameter.parameterType}\n                {parameter.parameterType === \"Argument\" &&\n                  parameter.position !== undefined &&\n                  ` (${parameter.position})`}\n              </Badge>\n            </Label>\n            <Input\n              type={parameter.dataType === \"Number\" ? \"number\" : \"text\"}\n              value={\n                parameter.dataType == \"Number\"\n                  ? (value as number)\n                  : (value as string)\n              }\n              onChange={(e) =>\n                updateParameterValue(parameter.id, e.target.value)\n              }\n              placeholder=\"Enter value\"\n            />\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {selectedCommand && tool.commands.length === 0 ? (\n        <p className=\"text-muted-foreground text-sm\">\n          No commands available for this tool.\n        </p>\n      ) : (\n        <div className=\"space-y-4\">\n          {tool.parameters.length > 0 ? (\n            tool.parameters\n              .filter(\n                (param) =>\n                  param.commandId === selectedCommand?.id || param.isGlobal\n              )\n              .map(renderParameterInput)\n          ) : (\n            <p className=\"text-muted-foreground text-sm\">\n              No parameters available for this command.\n            </p>\n          )}\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}
