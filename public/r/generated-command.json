{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "generated-command",
  "type": "registry:component",
  "title": "Generated Command",
  "description": "A component that generates CLI commands based on tool configuration and parameter values with copy and save functionality.",
  "dependencies": ["react", "lucide-react", "sonner"],
  "registryDependencies": ["button"],
  "files": [
    {
      "path": "registry/commandly/components/generated-command.tsx",
      "content": "import { useEffect, useState, useMemo } from \"react\";\nimport { TerminalIcon, CopyIcon, SaveIcon } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { Button } from \"@/components/ui/button\";\nimport { getCommandPath } from \"@/registry/commandly/lib/utils/tool-editor\";\nimport {\n  Parameter,\n  ParameterValue,\n  Tool,\n  Command\n} from \"@/registry/commandly/lib/types/tool-editor\";\n\ninterface GeneratedCommandProps {\n  tool: Tool;\n  selectedCommand?: Command;\n  parameterValues: Record<string, ParameterValue>;\n  onSaveCommand?: (command: string) => void;\n}\n\nexport function GeneratedCommand({\n  tool,\n  selectedCommand,\n  parameterValues,\n  onSaveCommand\n}: GeneratedCommandProps) {\n  selectedCommand = selectedCommand || tool.commands[0];\n  const [generatedCommand, setGeneratedCommand] = useState(\"\");\n\n  const globalParameters = useMemo(() => {\n    return tool.parameters?.filter((p) => p.isGlobal) || [];\n  }, [tool]);\n\n  const currentParameters = useMemo(() => {\n    return (\n      tool?.parameters?.filter((p) => p.commandId === selectedCommand.id) || []\n    );\n  }, [tool, selectedCommand]);\n\n  useEffect(() => {\n    generateCommand();\n  }, [tool, parameterValues, selectedCommand]);\n\n  const generateCommand = () => {\n    const commandPath = getCommandPath(selectedCommand, tool);\n    let command =\n      tool.name == commandPath ? tool.name : `${tool.name} ${commandPath}`;\n\n    const parametersWithValues: Array<{\n      param: Parameter;\n      value: ParameterValue;\n    }> = [];\n\n    globalParameters.forEach((param) => {\n      const value = parameterValues[param.id];\n      if (value !== undefined && value !== \"\" && value !== false) {\n        parametersWithValues.push({ param, value });\n      }\n    });\n\n    currentParameters.forEach((param) => {\n      const value = parameterValues[param.id];\n      if (\n        value !== undefined &&\n        value !== \"\" &&\n        value !== false &&\n        !param.isGlobal\n      ) {\n        parametersWithValues.push({ param, value });\n      }\n    });\n\n    const positionalParams = parametersWithValues\n      .filter(({ param }) => param.parameterType === \"Argument\")\n      .sort((a, b) => (a.param.position || 0) - (b.param.position || 0));\n\n    parametersWithValues.forEach(({ param, value }) => {\n      if (param.parameterType === \"Flag\") {\n        if (value === true) {\n          const flag = param.shortFlag || param.longFlag;\n          if (flag) command += ` ${flag}`;\n        }\n      } else if (param.parameterType === \"Option\") {\n        const flag = param.shortFlag || param.longFlag;\n        if (flag) {\n          const separator = param.keyValueSeparator ?? \" \";\n          command += ` ${flag}${separator}${value}`;\n        }\n      } else if (param.parameterType === \"Argument\") {\n        command += ` ${value}`;\n      }\n    });\n\n    positionalParams.forEach(({ value }) => {\n      command += ` ${value}`;\n    });\n\n    setGeneratedCommand(command);\n  };\n\n  const copyCommand = () => {\n    navigator.clipboard.writeText(generatedCommand);\n    toast(\"Command copied!\");\n  };\n\n  return (\n    <div>\n      {tool.commands.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <TerminalIcon className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">\n            No commands available for this tool.\n          </p>\n        </div>\n      ) : generatedCommand ? (\n        <div className=\"space-y-4\">\n          <div className=\"bg-muted p-4 rounded font-mono text-sm\">\n            {generatedCommand}\n          </div>\n          <div className=\"flex gap-2\">\n            <Button onClick={copyCommand} variant=\"outline\" className=\"flex-1\">\n              <CopyIcon className=\"h-4 w-4 mr-2\" />\n              Copy Command\n            </Button>\n            {onSaveCommand && (\n              <Button\n                onClick={() => onSaveCommand(generatedCommand)}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                <SaveIcon className=\"h-4 w-4 mr-2\" />\n                Save Command\n              </Button>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className=\"text-center py-8\">\n          <TerminalIcon className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">\n            Configure parameters to generate the command.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}
