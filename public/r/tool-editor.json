{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tool-editor",
  "type": "registry:block",
  "title": "Tool Editor",
  "description": "A comprehensive tool editor for creating and editing CLI tools with parameter management, command trees, and preview functionality.",
  "dependencies": [
    "react",
    "zod",
    "lucide-react",
    "sonner",
    "@tanstack/react-store"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "input",
    "label",
    "select",
    "textarea",
    "tabs",
    "tooltip",
    "scroll-area",
    "hover-card"
  ],
  "files": [
    {
      "path": "registry/commandly/tool-editor/tool-editor.tsx",
      "content": "import { SavedCommand, Tool } from \"@/registry/commandly/lib/types/tool-editor\";\nimport { CommandTree } from \"./command-tree\";\nimport { ParameterList } from \"./parameter-list\";\nimport { ParameterDetailsDialog } from \"../tool-editor/dialogs/parameter-details-dialog\";\nimport { ExclusionGroupsDialog } from \"../tool-editor/dialogs/exclusion-groups-dialog\";\nimport { PreviewTabs } from \"./preview-tabs\";\nimport { ToolDetailsDialog } from \"../tool-editor/dialogs/tool-details-dialog\";\nimport { SavedCommandsDialog } from \"@/components/tool-editor-ui/dialogs/saved-commands-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { SaveIcon, Edit2Icon, LayersIcon } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { toolBuilderActions, toolBuilderStore } from \"./tool-editor.store\";\nimport { toast } from \"sonner\";\nimport {\n  getSavedCommandsFromStorage,\n  removeSavedCommandFromStorage\n} from \"@/registry/commandly/lib/utils/tool-editor\";\n\ninterface ToolEditorProps {\n  tool: Tool;\n  onSave?: (tool: Tool) => void;\n}\n\nexport default function ToolEditor({\n  tool: toolToEdit,\n  onSave\n}: ToolEditorProps) {\n  const tool = useStore(toolBuilderStore, (state) => state.tool);\n\n  useEffect(() => {\n    toolBuilderActions.initializeTool(toolToEdit);\n  }, [toolToEdit]);\n\n  const [savedCommands, setSavedCommands] = useState<SavedCommand[]>([]);\n\n  const handleDeleteCommand = (commandId: string) => {\n    const toolId = tool.id || tool.name;\n    removeSavedCommandFromStorage(`saved-${toolId}`, commandId);\n    setSavedCommands(savedCommands.filter((cmd) => cmd.id !== commandId));\n  };\n\n  return (\n    <div className=\"flex bg-background\">\n      <div className=\"w-72 border-r border-muted overflow-hidden flex flex-col\">\n        <div className=\"p-2 flex flex-col gap-2 border-b border-muted justify-center\">\n          <p className=\"p-3\">Commands</p>\n        </div>\n        <CommandTree />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col\">\n        <div className=\"p-4 border-b border-muted\">\n          <div className=\"flex justify-between\">\n            <div className=\"flex items-center gap-2 justify-between\">\n              <span\n                className=\"font-medium text-lg\"\n                style={{\n                  viewTransitionName: `tool-card-title-${tool.name}`\n                }}\n              >\n                {tool.displayName\n                  ? `${tool.displayName} (${tool.name})`\n                  : `${tool.name}`}\n              </span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0\"\n                onClick={() =>\n                  toolBuilderActions.setDialogOpen(\"editTool\", true)\n                }\n              >\n                <Edit2Icon className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              {onSave && (\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  onClick={() => {\n                    onSave(toolBuilderStore.state.tool);\n                    toast(\"Tool saved successfully!\");\n                  }}\n                >\n                  <SaveIcon className=\"h-4 w-4 mr-2\" />\n                  Save\n                </Button>\n              )}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  const toolId = tool.id || tool.name;\n                  const commands = getSavedCommandsFromStorage(toolId);\n                  setSavedCommands(commands);\n                  toolBuilderActions.setDialogOpen(\"savedCommands\", true);\n                }}\n              >\n                <SaveIcon className=\"h-4 w-4 mr-2\" />\n                Saved Commands\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() =>\n                  toolBuilderActions.setDialogOpen(\"exclusionGroups\", true)\n                }\n              >\n                <LayersIcon className=\"h-4 w-4 mr-2\" />\n                Exclusion Groups\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex content-between p-4 gap-4\">\n          <div className=\"flex flex-2/5 flex-col gap-4 min-w-80\">\n            <ParameterList title=\"Global Parameters\" isGlobal={true} />\n            <ParameterList title=\"Command Parameters\" isGlobal={false} />\n          </div>\n          <div className=\"flex-3/5 max-w-3xl\">\n            <PreviewTabs />\n          </div>\n        </div>\n      </div>\n\n      <ParameterDetailsDialog />\n      <ToolDetailsDialog />\n      <SavedCommandsDialog\n        savedCommands={savedCommands}\n        onDeleteCommand={handleDeleteCommand}\n      />\n      <ExclusionGroupsDialog />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/commandly/tool-editor/tool-editor.store.ts",
      "content": "import { Store } from \"@tanstack/react-store\";\nimport {\n  Tool,\n  Command,\n  Parameter,\n  ExclusionGroup,\n  ParameterValue,\n  SavedCommand\n} from \"@/registry/commandly/lib/types/tool-editor\";\nimport { toast } from \"sonner\";\nimport {\n  addSavedCommandToStorage,\n  createNewCommand,\n  defaultTool,\n  getAllSubcommands,\n  getSavedCommandsFromStorage,\n  removeSavedCommandFromStorage\n} from \"@/registry/commandly/lib/utils/tool-editor\";\nimport { v7 as uuidv7 } from \"uuid\";\n\nexport interface ToolBuilderState {\n  tool: Tool;\n  selectedCommand: Command;\n  selectedParameter: Parameter | null;\n  editingCommand: Command | null;\n  parameterValues: Record<string, ParameterValue>;\n  dialogs: {\n    parameterDetails: boolean;\n    editTool: boolean;\n    savedCommands: boolean;\n    exclusionGroups: boolean;\n  };\n}\n\nexport const toolBuilderStore = new Store<ToolBuilderState>({\n  tool: defaultTool(),\n  selectedCommand: {} as Command,\n  selectedParameter: null,\n  editingCommand: null,\n  parameterValues: {},\n  dialogs: {\n    parameterDetails: false,\n    editTool: false,\n    savedCommands: false,\n    exclusionGroups: false\n  }\n});\n\nexport const toolBuilderSelectors = {\n  getParametersForCommand: (\n    state: ToolBuilderState,\n    commandId: string\n  ): Parameter[] => {\n    return state.tool.parameters.filter((param: Parameter) => {\n      if (param.isGlobal) return false;\n      return param.commandId === commandId;\n    });\n  },\n\n  getGlobalParameters: (state: ToolBuilderState): Parameter[] => {\n    return state.tool.parameters.filter((param: Parameter) => param.isGlobal);\n  },\n\n  getExclusionGroupsForCommand: (\n    state: ToolBuilderState,\n    commandId: string\n  ): ExclusionGroup[] => {\n    return state.tool.exclusionGroups.filter((group: ExclusionGroup) => {\n      return group.commandId === commandId;\n    });\n  }\n};\n\nexport const toolBuilderActions = {\n  initializeTool(tool: Tool) {\n    toolBuilderStore.setState((state) => ({\n      ...state,\n      tool,\n      selectedCommand: tool.commands[0]\n    }));\n  },\n\n  updateTool(updates: Partial<Tool>) {\n    toolBuilderStore.setState((state) => ({\n      ...state,\n      tool: {\n        ...state.tool,\n        ...updates\n      }\n    }));\n  },\n\n  addSubcommand(parentId?: string) {\n    const newCommand = createNewCommand(parentId);\n    toolBuilderStore.setState((state) => ({\n      ...state,\n      tool: {\n        ...state.tool,\n        commands: [...state.tool.commands, newCommand]\n      }\n    }));\n\n    toast(\"Command Added\", {\n      description: \"New command has been created successfully.\"\n    });\n  },\n\n  deleteCommand(commandId: string) {\n    toolBuilderStore.setState((state) => {\n      const subcommands = getAllSubcommands(commandId, state.tool.commands);\n      const commandsToDelete = [commandId, ...subcommands.map((c) => c.id)];\n\n      const newState = {\n        ...state,\n        tool: {\n          ...state.tool,\n          commands: state.tool.commands.filter(\n            (cmd) => !commandsToDelete.includes(cmd.id)\n          ),\n          parameters: state.tool.parameters.filter(\n            (param) => !commandsToDelete.includes(param.commandId || \"\")\n          ),\n          exclusionGroups: state.tool.exclusionGroups.filter(\n            (group) => !commandsToDelete.includes(group.commandId || \"\")\n          )\n        }\n      };\n\n      if (state.selectedCommand?.id === commandId) {\n        newState.selectedCommand = newState.tool.commands[0];\n      }\n\n      return newState;\n    });\n\n    toast(\"Command Deleted\", {\n      description: \"Command and all its subcommands have been deleted.\"\n    });\n  },\n\n  updateCommand(commandId: string, updates: Partial<Command>) {\n    toolBuilderStore.setState((state) => ({\n      ...state,\n      tool: {\n        ...state.tool,\n        commands: state.tool.commands.map((cmd) => {\n          let updatedCmd: Command;\n          if (cmd.id === commandId) {\n            updatedCmd = { ...cmd, ...updates };\n          } else {\n            if (!updates.isDefault) updatedCmd = cmd;\n            else {\n              updatedCmd = { ...cmd, isDefault: false };\n            }\n          }\n          return updatedCmd;\n        })\n      }\n    }));\n  },\n\n  removeParameter(parameterId: string) {\n    toolBuilderStore.setState((state) => {\n      const newState = {\n        ...state,\n        tool: {\n          ...state.tool,\n          parameters: state.tool.parameters.filter(\n            (param) => param.id !== parameterId\n          ),\n          exclusionGroups: state.tool.exclusionGroups.map((group) => ({\n            ...group,\n            parameterIds: group.parameterIds.filter((id) => id !== parameterId)\n          }))\n        }\n      };\n\n      if (state.selectedParameter?.id === parameterId) {\n        newState.selectedParameter = null;\n      }\n\n      return newState;\n    });\n\n    toast(\"Parameter Deleted\", {\n      description: \"Parameter has been removed successfully.\"\n    });\n  },\n  addSavedCommand(command: string) {\n    const toolId =\n      toolBuilderStore.state.tool.id || toolBuilderStore.state.tool.name;\n    const existingCommands = getSavedCommandsFromStorage(toolId);\n    if (existingCommands.some((cmd) => cmd.command === command)) {\n      toast.error(\"Command already exists\", {\n        description: \"This command has already been saved.\"\n      });\n      return;\n    }\n    const newSavedCommand: SavedCommand = {\n      id: uuidv7(),\n      command\n    };\n\n    addSavedCommandToStorage(`saved-${toolId}`, newSavedCommand);\n\n    toast(\"Command Saved\", {\n      description: \"Command has been saved successfully.\"\n    });\n  },\n\n  removeSavedCommand(commandId: string) {\n    toolBuilderStore.setState((state) => {\n      const toolId = state.tool.id || state.tool.name;\n      removeSavedCommandFromStorage(`saved-${toolId}`, commandId);\n      return { ...state };\n    });\n  },\n\n  addExclusionGroup(group: Omit<ExclusionGroup, \"id\">) {\n    toolBuilderStore.setState((state) => {\n      const newGroup = {\n        ...group,\n        id: uuidv7(),\n        commandId: state.selectedCommand?.id\n      };\n\n      return {\n        ...state,\n        tool: {\n          ...state.tool,\n          exclusionGroups: [...state.tool.exclusionGroups, newGroup]\n        }\n      };\n    });\n\n    toast(\"Group Added\", {\n      description: \"New exclusion group has been created successfully.\"\n    });\n  },\n\n  updateExclusionGroup(updatedGroup: ExclusionGroup) {\n    toolBuilderStore.setState((state) => ({\n      ...state,\n      tool: {\n        ...state.tool,\n        exclusionGroups: state.tool.exclusionGroups.map((group) =>\n          group.id === updatedGroup.id ? updatedGroup : group\n        )\n      }\n    }));\n\n    toast(\"Group Updated\", {\n      description: \"Exclusion group has been updated successfully.\"\n    });\n  },\n\n  removeExclusionGroup(groupId: string) {\n    toolBuilderStore.setState((state) => ({\n      ...state,\n      tool: {\n        ...state.tool,\n        exclusionGroups: state.tool.exclusionGroups.filter(\n          (group) => group.id !== groupId\n        )\n      }\n    }));\n\n    toast(\"Group Removed\", {\n      description: \"Exclusion group has been removed successfully.\"\n    });\n  },\n\n  setDialogOpen(\n    dialog:\n      | \"editTool\"\n      | \"savedCommands\"\n      | \"exclusionGroups\"\n      | \"parameterDetails\",\n    open: boolean\n  ) {\n    toolBuilderStore.setState((state) => ({\n      ...state,\n      dialogs: {\n        ...state.dialogs,\n        [dialog]: open\n      }\n    }));\n  },\n\n  setSelectedCommand(command: Command) {\n    toolBuilderStore.setState((state) => ({\n      ...state,\n      selectedCommand: command\n    }));\n  },\n\n  setSelectedParameter(parameter: Parameter | null) {\n    toolBuilderStore.setState((state) => ({\n      ...state,\n      selectedParameter: parameter\n    }));\n  },\n\n  setEditingCommand(command: Command | null) {\n    toolBuilderStore.setState((state) => ({\n      ...state,\n      editingCommand: command\n    }));\n  },\n\n  upsertParameter(parameter: Parameter) {\n    toolBuilderStore.setState((state) => {\n      const exists = state.tool.parameters.some((p) => p.id === parameter.id);\n      let newParameters: Parameter[];\n      if (exists) {\n        newParameters = state.tool.parameters.map((param) => {\n          if (param.id === parameter.id) {\n            const updatedParam = {\n              ...param,\n              ...parameter,\n              dependencies: parameter.dependencies || [],\n              validations: parameter.validations || [],\n              enumValues: parameter.enumValues || []\n            };\n            if (parameter.isGlobal && parameter.isGlobal !== param.isGlobal) {\n              updatedParam.commandId = undefined;\n            }\n            if (parameter.isGlobal === false && param.isGlobal) {\n              updatedParam.commandId = state.selectedCommand?.id;\n            }\n            return updatedParam;\n          }\n          return param;\n        });\n        toast(\"Parameter Updated\", {\n          description: `Parameter has been updated successfully.`\n        });\n      } else {\n        newParameters = [...state.tool.parameters, parameter];\n        toast(\"Parameter Added\", {\n          description: `New ${parameter.isGlobal ? \"global \" : \"\"}parameter has been created successfully.`\n        });\n      }\n      return {\n        ...state,\n        tool: {\n          ...state.tool,\n          parameters: newParameters\n        }\n      };\n    });\n  }\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/commandly/tool-editor/command-tree.tsx",
      "content": "import { useState, useEffect, ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Command } from \"@/registry/commandly/lib/types/tool-editor\";\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  Edit2Icon,\n  PlusIcon,\n  Trash2Icon\n} from \"lucide-react\";\nimport { CommandDialog } from \"../tool-editor/dialogs/command-dialog\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { toolBuilderStore, toolBuilderActions } from \"./tool-editor.store\";\n\nexport function CommandTree() {\n  const tool = useStore(toolBuilderStore, (state) => state.tool);\n  const selectedCommand = useStore(\n    toolBuilderStore,\n    (state) => state.selectedCommand\n  );\n  const editingCommand = useStore(\n    toolBuilderStore,\n    (state) => state.editingCommand\n  );\n\n  const [expandedCommands, setExpandedCommands] = useState<Set<string>>(\n    new Set([tool.commands[0]?.id])\n  );\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [lastAddedCommand, setLastAddedCommand] = useState<{\n    id: string;\n    parentId?: string;\n  } | null>(null);\n\n  const handleEditCommand = (command: Command | null) => {\n    toolBuilderActions.setEditingCommand(command);\n  };\n\n  const toggleExpanded = (commandId: string) => {\n    setExpandedCommands((prev) => {\n      const newSet = new Set(prev);\n      if (newSet.has(commandId)) {\n        newSet.delete(commandId);\n      } else {\n        newSet.add(commandId);\n      }\n      return newSet;\n    });\n  };\n\n  // Patch toolBuilderActions.addSubcommand to select and expand parent after add\n  const handleAddSubcommand = (parentId?: string) => {\n    const prevIds = new Set(tool.commands.map((cmd) => cmd.id));\n    toolBuilderActions.addSubcommand(parentId);\n    setTimeout(() => {\n      const newCmd = toolBuilderStore.state.tool.commands.find(\n        (cmd) => !prevIds.has(cmd.id)\n      );\n      if (newCmd) {\n        setLastAddedCommand({ id: newCmd.id, parentId });\n      }\n    }, 0);\n  };\n\n  useEffect(() => {\n    if (!lastAddedCommand) return;\n    const { id, parentId } = lastAddedCommand;\n    const newCmd = tool.commands.find((cmd) => cmd.id === id);\n    if (newCmd) {\n      toolBuilderActions.setSelectedCommand(newCmd);\n      if (parentId) {\n        setExpandedCommands((prev) => {\n          const newSet = new Set(prev);\n          newSet.add(parentId);\n          return newSet;\n        });\n      }\n      setLastAddedCommand(null);\n    }\n  }, [tool.commands, lastAddedCommand]);\n\n  const renderCommandNode = (command: Command, level = 0): ReactNode => {\n    const isExpanded = expandedCommands.has(command.id);\n    const subcommands = tool.commands.filter(\n      (cmd) => cmd.parentCommandId === command.id\n    );\n    const hasSubcommands = subcommands.length > 0;\n    const isSelected = selectedCommand?.id === command.id;\n    const isRoot = command.name == tool.name;\n\n    return (\n      <div key={command.id}>\n        <div\n          className={`flex items-center gap-2 p-2 rounded-md cursor-pointer hover:bg-muted/50 group ${\n            isSelected ? \"bg-muted\" : \"\"\n          }`}\n          style={{ paddingLeft: `${level * 16 + 8}px` }}\n          onClick={() => toolBuilderActions.setSelectedCommand(command)}\n        >\n          {hasSubcommands ? (\n            <Button\n              id=\"expand-button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-4 w-4 p-0\"\n              onClick={(e) => {\n                e.stopPropagation();\n                toggleExpanded(command.id);\n              }}\n            >\n              {isExpanded ? (\n                <ChevronDownIcon className=\"h-3 w-3\" />\n              ) : (\n                <ChevronRightIcon className=\"h-3 w-3\" />\n              )}\n            </Button>\n          ) : (\n            <div className=\"w-4\" />\n          )}\n\n          <span className=\"text-sm font-medium flex-1\">{command.name}</span>\n          {command.isDefault && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              default\n            </Badge>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-4 w-4 p-0 opacity-0 group-hover:opacity-100\"\n            onClick={(e) => {\n              e.stopPropagation();\n              handleEditCommand(command);\n              setIsDialogOpen(true);\n            }}\n          >\n            <Edit2Icon className=\"h-3 w-3\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-4 w-4 p-0 opacity-0 group-hover:opacity-100\"\n            onClick={(e) => {\n              e.stopPropagation();\n              handleAddSubcommand(command.id);\n            }}\n          >\n            <PlusIcon className=\"h-3 w-3\" />\n          </Button>\n          {!isRoot && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-4 w-4 p-0 opacity-0 group-hover:opacity-100\"\n              onClick={(e) => {\n                e.stopPropagation();\n                toolBuilderActions.deleteCommand(command.id);\n              }}\n            >\n              <Trash2Icon className=\"h-3 w-3 text-destructive\" />\n            </Button>\n          )}\n        </div>\n\n        {isExpanded && hasSubcommands && (\n          <>\n            <div>\n              {subcommands.map((subcmd) =>\n                renderCommandNode(subcmd, level + 1)\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const rootCommands = tool.commands.filter((cmd) => !cmd.parentCommandId);\n\n  return (\n    <>\n      <ScrollArea className=\"flex-1 p-1\">\n        <div className=\"p-2\">\n          {rootCommands.map((command) => renderCommandNode(command))}\n        </div>\n        <div className=\"p-2\">\n          <Button className=\"w-full\" onClick={() => handleAddSubcommand()}>\n            <PlusIcon className=\"h-3 w-3 mr-1\" />\n            Add Command\n          </Button>\n        </div>\n      </ScrollArea>\n      {editingCommand && (\n        <CommandDialog\n          isOpen={isDialogOpen}\n          onOpenChange={(open) => {\n            setIsDialogOpen(open);\n            handleEditCommand(null);\n          }}\n        />\n      )}\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/commandly/tool-editor/parameter-list.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  ExclusionGroup,\n  ParameterType\n} from \"@/registry/commandly/lib/types/tool-editor\";\nimport {\n  CheckCircleIcon,\n  FileTextIcon,\n  FlagIcon,\n  GlobeIcon,\n  HashIcon,\n  LayersIcon,\n  PlusIcon,\n  Trash2Icon,\n  XCircleIcon\n} from \"lucide-react\";\nimport { useStore } from \"@tanstack/react-store\";\nimport {\n  toolBuilderStore,\n  toolBuilderActions,\n  toolBuilderSelectors\n} from \"./tool-editor.store\";\nimport {\n  createNewParameter,\n  validateDefaultValue\n} from \"@/registry/commandly/lib/utils/tool-editor\";\n\ninterface ParameterListProps {\n  title: string;\n  isGlobal?: boolean;\n}\n\nexport function ParameterList({ title, isGlobal = false }: ParameterListProps) {\n  const selectedCommand = useStore(\n    toolBuilderStore,\n    (state) => state.selectedCommand\n  );\n  const globalParameters = useStore(toolBuilderStore, (state) =>\n    toolBuilderSelectors.getGlobalParameters(state)\n  );\n  const commandParameters = useStore(toolBuilderStore, (state) =>\n    selectedCommand?.id\n      ? toolBuilderSelectors.getParametersForCommand(state, selectedCommand.id)\n      : []\n  );\n  const exclusionGroups = useStore(toolBuilderStore, (state) =>\n    selectedCommand?.id\n      ? toolBuilderSelectors.getExclusionGroupsForCommand(\n          state,\n          selectedCommand.id\n        )\n      : []\n  );\n\n  const parameters = isGlobal ? globalParameters : commandParameters;\n\n  const getParameterIcon = (parameterType: ParameterType) => {\n    switch (parameterType) {\n      case \"Flag\":\n        return <FlagIcon className=\"h-4 w-4\" />;\n      case \"Option\":\n        return <HashIcon className=\"h-4 w-4\" />;\n      case \"Argument\":\n        return <FileTextIcon className=\"h-4 w-4\" />;\n      default:\n        return <HashIcon className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getParameterExclusionGroups = (\n    parameterId: string\n  ): ExclusionGroup[] => {\n    return exclusionGroups.filter((group) =>\n      group.parameterIds.includes(parameterId)\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n          {isGlobal && <GlobeIcon className=\"h-5 w-5\" />}\n          {title} ({parameters.length})\n        </h3>\n        <Button\n          onClick={() =>\n            toolBuilderActions.setSelectedParameter(\n              createNewParameter(isGlobal, selectedCommand?.id)\n            )\n          }\n          size=\"sm\"\n        >\n          <PlusIcon className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      <div className=\"space-y-2\">\n        {parameters.map((parameter) => {\n          const validation = validateDefaultValue(parameter);\n          const paramGroups = getParameterExclusionGroups(parameter.id);\n\n          return (\n            <div\n              key={parameter.id}\n              className={\"p-3 border rounded cursor-pointer hover:bg-muted/50\"}\n              onClick={() => toolBuilderActions.setSelectedParameter(parameter)}\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-2\">\n                  {getParameterIcon(parameter.parameterType)}\n                  <span className=\"font-medium text-sm\">\n                    {parameter.name}\n                    {(parameter.longFlag || parameter.shortFlag) && (\n                      <span className=\"text-muted-foreground ml-1\">\n                        (\n                        {[parameter.longFlag, parameter.shortFlag]\n                          .filter(Boolean)\n                          .join(\", \")}\n                        )\n                      </span>\n                    )}\n                  </span>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-6 w-6 p-0\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    toolBuilderActions.removeParameter(parameter.id);\n                  }}\n                >\n                  <Trash2Icon className=\"h-3 w-3 text-destructive\" />\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-1 flex-wrap\">\n                {parameter.isRequired && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    required\n                  </Badge>\n                )}\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {parameter.parameterType}\n                </Badge>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {parameter.dataType}\n                </Badge>\n                {isGlobal && (\n                  <Badge variant=\"default\" className=\"text-xs\">\n                    global\n                  </Badge>\n                )}\n                {paramGroups.map((group) => (\n                  <Badge\n                    key={group.id}\n                    variant=\"secondary\"\n                    className=\"text-xs bg-muted flex items-center gap-1\"\n                  >\n                    <LayersIcon className=\"h-3 w-3\" />\n                    {group.name}\n                  </Badge>\n                ))}\n                {!validation.isValid && (\n                  <XCircleIcon className=\"h-3 w-3 text-destructive\" />\n                )}\n                {validation.isValid && parameter.defaultValue && (\n                  <CheckCircleIcon className=\"h-3 w-3 text-green-500\" />\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/commandly/tool-editor/preview-tabs.tsx",
      "content": "import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { HelpMenu } from \"./help-menu\";\nimport { useQueryState } from \"nuqs\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { toolBuilderStore, toolBuilderActions } from \"./tool-editor.store\";\nimport { RuntimePreview } from \"../components/runtime-preview\";\nimport { GeneratedCommand } from \"../components/generated-command\";\nimport { JsonOutput } from \"../components/json-output\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle\n} from \"@/components/ui/card\";\nimport { ParameterValue } from \"@/registry/commandly/lib/types/tool-editor\";\nimport { TerminalIcon } from \"lucide-react\";\n\nexport function PreviewTabs() {\n  const [currentTab, setActiveTab] = useQueryState(\"tab\", {\n    defaultValue: \"ui\"\n  });\n\n  const selectedCommand = useStore(\n    toolBuilderStore,\n    (state) => state.selectedCommand\n  );\n  const tool = useStore(toolBuilderStore, (state) => state.tool);\n  const parameterValues = useStore(\n    toolBuilderStore,\n    (state) => state.parameterValues\n  );\n  const updateParameterValue = (parameterId: string, value: ParameterValue) => {\n    toolBuilderStore.setState((state) => ({\n      ...state,\n      parameterValues: {\n        ...state.parameterValues,\n        [parameterId]: value as ParameterValue\n      }\n    }));\n  };\n\n  const handleSaveCommand = (command: string) => {\n    toolBuilderActions.addSavedCommand(command);\n  };\n\n  return (\n    <div className=\"h-full rounded-xl flex justify-center max-w-full\">\n      <Tabs value={currentTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"flex justify-center w-fit mx-auto\">\n          <TabsTrigger value=\"json\">Json</TabsTrigger>\n          <TabsTrigger value=\"ui\">Preview</TabsTrigger>\n          <TabsTrigger value=\"help\">Help</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"json\">\n          <JsonOutput tool={tool} />\n        </TabsContent>\n        <TabsContent value=\"ui\" className=\"flex flex-col gap-4\">\n          <Card>\n            <CardHeader hidden={true}>\n              <CardDescription hidden={true}></CardDescription>\n              <CardTitle>Runtime Preview</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <RuntimePreview\n                selectedCommand={selectedCommand}\n                tool={tool}\n                parameterValues={parameterValues}\n                updateParameterValue={updateParameterValue}\n              />\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TerminalIcon className=\"h-5 w-5\" />\n                Generated Command\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <GeneratedCommand\n                tool={tool}\n                parameterValues={parameterValues}\n                onSaveCommand={handleSaveCommand}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n        <TabsContent value=\"help\">\n          <Card className=\"p-0 rounded-xl\">\n            <CardHeader hidden={true}>\n              <CardDescription hidden={true}>\n                Get help with using this tool and its features.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <HelpMenu />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/commandly/tool-editor/help-menu.tsx",
      "content": "import { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\nimport { Command } from \"@/registry/commandly/lib/types/tool-editor\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { toolBuilderStore } from \"./tool-editor.store\";\n\nexport function HelpMenu() {\n  const tool = useStore(toolBuilderStore, (state) => state.tool);\n\n  const generateToolPreview = (): string => {\n    const rootCommands = tool.commands.filter((cmd) => !cmd.parentCommandId);\n    const globalParams = tool.parameters.filter((p) => p.isGlobal);\n\n    let preview = `${tool.displayName}${tool.version ? ` v${tool.version}` : \"\"}\\n`;\n    preview += `${tool.description}\\n\\n`;\n\n    preview += `USAGE:\\n`;\n    preview += `  ${tool.name} [GLOBAL OPTIONS] <COMMAND> [OPTIONS] [ARGUMENTS]\\n\\n`;\n\n    if (globalParams.length > 0) {\n      preview += \"GLOBAL OPTIONS:\\n\";\n\n      const globalFlags = globalParams.filter(\n        (p) => p.parameterType === \"Flag\"\n      );\n      const globalOptions = globalParams.filter(\n        (p) => p.parameterType === \"Option\"\n      );\n\n      globalFlags.forEach((flag) => {\n        const shortFlag = flag.shortFlag ? `${flag.shortFlag}` : \"\";\n        const longFlag = flag.longFlag ? `${flag.longFlag}` : \"\";\n        const flagStr =\n          shortFlag && longFlag\n            ? `${shortFlag}, ${longFlag}`\n            : shortFlag || longFlag;\n        const required = flag.isRequired ? \"Required: \" : \"\";\n        preview += `  ${flagStr.padEnd(20)} ${required}${flag.description}\\n`;\n      });\n\n      globalOptions.forEach((option) => {\n        const shortFlag = option.shortFlag ? `${option.shortFlag}` : \"\";\n        const longFlag = option.longFlag ? `${option.longFlag}` : \"\";\n        const flagStr =\n          shortFlag && longFlag\n            ? `${shortFlag}, ${longFlag}`\n            : shortFlag || longFlag;\n        const valueType = option.dataType.includes(\"array\")\n          ? `<value1${option.arraySeparator}value2>`\n          : `<${option.dataType}>`;\n        const required = option.isRequired ? \"Required: \" : \"\";\n        preview += `  ${flagStr.padEnd(20)} ${required}${option.description}\\n`;\n        preview += `  ${\" \".repeat(20)} Value: ${valueType}\\n`;\n      });\n\n      preview += \"\\n\";\n    }\n\n    preview += \"COMMANDS:\\n\";\n    const printCommand = (command: Command, level = 0) => {\n      const indent = \"  \".repeat(level + 1);\n      preview += `${indent}${command.name.padEnd(20 - level * 2)} ${\n        command.description\n      }\\n`;\n\n      const commandParams = tool.parameters.filter(\n        (p) => !p.isGlobal && p.commandId === command.name\n      );\n\n      const flags = commandParams.filter((p) => p.parameterType === \"Flag\");\n      const options = commandParams.filter((p) => p.parameterType === \"Option\");\n      const arguments_ = commandParams.filter(\n        (p) => p.parameterType === \"Argument\"\n      );\n\n      if (flags.length > 0) {\n        preview += `${indent}  Flags:\\n`;\n        flags.forEach((flag) => {\n          const shortFlag = flag.shortFlag ? `${flag.shortFlag}` : \"\";\n          const longFlag = flag.longFlag ? `${flag.longFlag}` : \"\";\n          const flagStr =\n            shortFlag && longFlag\n              ? `${shortFlag}, ${longFlag}`\n              : shortFlag || longFlag;\n          const required = flag.isRequired ? \"Required: \" : \"\";\n          preview += `${indent}    ${flagStr.padEnd(18)} ${required}${\n            flag.description\n          }\\n`;\n        });\n      }\n\n      if (options.length > 0) {\n        preview += `${indent}  Options:\\n`;\n        options.forEach((option) => {\n          const shortFlag = option.shortFlag ? `${option.shortFlag}` : \"\";\n          const longFlag = option.longFlag ? `${option.longFlag}` : \"\";\n          const flagStr =\n            shortFlag && longFlag\n              ? `${shortFlag}, ${longFlag}`\n              : shortFlag || longFlag;\n          const valueType = option.dataType.includes(\"array\")\n            ? `<value1${option.arraySeparator}value2>`\n            : `<${option.dataType}>`;\n          const required = option.isRequired ? \"Required: \" : \"\";\n          preview += `${indent}    ${flagStr.padEnd(18)} ${required}${\n            option.description\n          }\\n`;\n          preview += `${indent}    ${\" \".repeat(18)} Value: ${valueType}\\n`;\n        });\n      }\n\n      if (arguments_.length > 0) {\n        preview += `${indent}  Arguments:\\n`;\n        arguments_.forEach((arg) => {\n          const required = arg.isRequired ? \"Required: \" : \"\";\n          preview += `${indent}    ${arg.name.padEnd(18)} ${required}${\n            arg.description\n          }\\n`;\n          if (arg.dataType === \"Enum\") {\n            preview += `${indent}    ${\" \".repeat(18)} Values: ${arg.enumValues\n              .map((e) => e.value)\n              .join(\", \")}\\n`;\n          }\n        });\n      }\n\n      const subcommands = tool.commands.filter(\n        (cmd) => cmd.parentCommandId === command.id\n      );\n      if (subcommands.length > 0) {\n        preview += `${indent}  Subcommands:\\n`;\n        subcommands.forEach((subcmd) => {\n          printCommand(subcmd, level + 2);\n        });\n      }\n    };\n\n    rootCommands.forEach((cmd) => printCommand(cmd));\n\n    return preview;\n  };\n\n  return (\n    <ScrollArea className=\"p-4 max-h-[75dvh] w-full rounded-xl\">\n      <pre className=\"text-sm font-mono max-h-[70dvh] w-full rounded-xl p-3\">\n        {generateToolPreview()}\n      </pre>\n      <ScrollBar orientation=\"vertical\" />\n      <ScrollBar orientation=\"horizontal\" />\n    </ScrollArea>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/commandly/tool-editor/dialogs/parameter-details-dialog.tsx",
      "content": "import { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogDescription\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  FileTextIcon,\n  FlagIcon,\n  HashIcon,\n  LinkIcon,\n  PlusIcon,\n  ShieldIcon,\n  Trash2Icon\n} from \"lucide-react\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { validateDefaultValue } from \"@/registry/commandly/lib/utils/tool-editor\";\nimport { v7 as uuidv7 } from \"uuid\";\nimport { TagsComponent } from \"@/components/tags\";\nimport { toolBuilderActions, toolBuilderStore } from \"../tool-editor.store\";\nimport {\n  Parameter,\n  ParameterDataType,\n  ParameterDependency,\n  ParameterDependencyType,\n  ParameterEnumValue,\n  ParameterType,\n  ParameterValidation,\n  ParameterValidationType\n} from \"../../lib/types/tool-editor\";\n\nexport function ParameterDetailsDialog() {\n  const selectedParameter = useStore(\n    toolBuilderStore,\n    (state) => state.selectedParameter\n  );\n\n  const commandId = useStore(\n    toolBuilderStore,\n    (state) => state.selectedCommand?.id\n  );\n\n  const availableParameters = useStore(toolBuilderStore, (state) => {\n    if (!selectedParameter) return [];\n    return state.tool.parameters.filter((p) => {\n      if (p.id === selectedParameter.id) return false;\n      if (selectedParameter.isGlobal) return p.isGlobal;\n      return p.isGlobal || p.commandId === commandId;\n    });\n  });\n\n  const [parameter, setParameter] = useState<Parameter>(selectedParameter!);\n  const [hasChanges, setHasChanges] = useState(false);\n\n  useEffect(() => {\n    setParameter(selectedParameter!);\n    setHasChanges(false);\n  }, [selectedParameter]);\n\n  const getParameterIcon = (parameterType: string) => {\n    switch (parameterType) {\n      case \"Flag\":\n        return <FlagIcon className=\"h-5 w-5\" />;\n      case \"Option\":\n        return <HashIcon className=\"h-5 w-5\" />;\n      case \"Argument\":\n        return <FileTextIcon className=\"h-5 w-5\" />;\n      default:\n        return <HashIcon className=\"h-5 w-5\" />;\n    }\n  };\n\n  const isOpen = !!selectedParameter;\n\n  const handleClose = () => {\n    toolBuilderActions.setSelectedParameter(null);\n    setHasChanges(false);\n  };\n\n  const handleSave = () => {\n    if (parameter) {\n      toolBuilderActions.upsertParameter(parameter);\n      setHasChanges(false);\n      handleClose();\n    }\n  };\n\n  const updateParameter = (updates: Partial<Parameter>) => {\n    setParameter((prev) => ({ ...prev, ...updates }));\n    setHasChanges(true);\n  };\n\n  const addDependency = () => {\n    if (!parameter || availableParameters.length === 0) return;\n\n    const newDependency: ParameterDependency = {\n      id: uuidv7(),\n      parameterId: parameter.id,\n      dependsOnParameterId: availableParameters[0].id,\n      dependencyType: \"requires\"\n    };\n\n    updateParameter({\n      dependencies: [...(parameter.dependencies || []), newDependency]\n    });\n  };\n\n  const updateDependency = (\n    dependencyId: string,\n    updates: Partial<ParameterDependency>\n  ) => {\n    if (!parameter) return;\n    const updatedDependencies = parameter.dependencies?.map((dep) =>\n      dep.id === dependencyId ? { ...dep, ...updates } : dep\n    );\n    updateParameter({ dependencies: updatedDependencies });\n  };\n\n  const removeDependency = (dependencyId: string) => {\n    if (!parameter) return;\n    const updatedDependencies = parameter.dependencies?.filter(\n      (dep) => dep.id !== dependencyId\n    );\n    updateParameter({ dependencies: updatedDependencies });\n  };\n\n  const addValidation = () => {\n    if (!parameter) return;\n    const newValidation: ParameterValidation = {\n      id: uuidv7(),\n      parameterId: parameter.id,\n      validationType: \"min_length\",\n      validationValue: \"1\",\n      errorMessage: \"Value is too short\"\n    };\n\n    updateParameter({\n      validations: [...(parameter.validations || []), newValidation]\n    });\n  };\n\n  const addEnumValue = () => {\n    if (!parameter) return;\n    const newEnumValue: ParameterEnumValue = {\n      id: uuidv7(),\n      parameterId: parameter.id,\n      value: \"new-value\",\n      displayName: \"New Value\",\n      description: \"\",\n      isDefault: false,\n      sortOrder: 0\n    };\n\n    updateParameter({\n      enumValues: [...parameter.enumValues, newEnumValue]\n    });\n  };\n\n  if (!parameter) return null;\n\n  const validation = validateDefaultValue(parameter);\n\n  const canSaveChanges = () => {\n    if (!hasChanges) return false;\n    if (parameter.defaultValue && !validation.isValid) {\n      return false;\n    }\n\n    if (!parameter.name.trim() || !parameter.longFlag.trim()) {\n      return false;\n    }\n    if (\n      availableParameters.some(\n        (p) =>\n          p.name.trim() === parameter.name.trim() ||\n          parameter.longFlag == p.longFlag ||\n          (parameter.shortFlag && parameter.shortFlag == p.shortFlag)\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            {getParameterIcon(parameter.parameterType)}\n            {parameter.name}\n            {parameter.isGlobal && (\n              <Badge variant=\"default\" className=\"text-xs\">\n                global\n              </Badge>\n            )}\n          </DialogTitle>\n          <DialogDescription></DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Basic Info */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"flex flex-col gap-2\">\n              <Label>\n                Parameter Name<span className=\"text-destructive ml-1\">*</span>\n              </Label>\n              <Input\n                value={parameter.name}\n                onChange={(e) => updateParameter({ name: e.target.value })}\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"flex flex-col gap-2\">\n              <Label>Parameter Type</Label>\n              <Select\n                value={parameter.parameterType}\n                onValueChange={(value: ParameterType) =>\n                  updateParameter({ parameterType: value })\n                }\n              >\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Flag\">Flag</SelectItem>\n                  <SelectItem value=\"Option\">Option</SelectItem>\n                  <SelectItem value=\"Argument\">Argument</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex flex-col gap-2\">\n              <Label>Data Type</Label>\n              <Select\n                value={parameter.dataType}\n                onValueChange={(value: ParameterDataType) =>\n                  updateParameter({ dataType: value })\n                }\n              >\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"String\">String</SelectItem>\n                  <SelectItem value=\"Number\">Number</SelectItem>\n                  <SelectItem value=\"Boolean\">Boolean</SelectItem>\n                  <SelectItem value=\"Enum\">Enum</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-center space-x-2 pt-6\">\n              <Switch\n                id=\"isGlobal\"\n                checked={parameter.isGlobal}\n                onCheckedChange={(checked) =>\n                  updateParameter({ isGlobal: checked })\n                }\n              />\n              <Label htmlFor=\"isGlobal\">Global</Label>\n            </div>\n          </div>\n\n          {(parameter.parameterType === \"Flag\" ||\n            parameter.parameterType === \"Option\") && (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"flex flex-col gap-2\">\n                <Label>Short Flag (include prefix)</Label>\n                <Input\n                  value={parameter.shortFlag}\n                  onChange={(e) =>\n                    updateParameter({ shortFlag: e.target.value })\n                  }\n                  placeholder=\"-v\"\n                />\n              </div>\n              <div className=\"flex flex-col gap-2\">\n                <Label>\n                  Long Flag (include prefix){\" \"}\n                  <span className=\"text-destructive ml-1\">*</span>\n                </Label>\n                <Input\n                  value={parameter.longFlag}\n                  onChange={(e) =>\n                    updateParameter({ longFlag: e.target.value })\n                  }\n                  placeholder=\"--verbose\"\n                />\n              </div>\n            </div>\n          )}\n\n          {parameter.parameterType === \"Option\" && (\n            <div className=\"flex flex-col gap-2\">\n              <Label>\n                Key-Value Separator\n                <span className=\"muted\">(default is single space)</span>\n              </Label>\n              <Input\n                value={parameter.keyValueSeparator ?? \" \"}\n                onChange={(e) =>\n                  updateParameter({ keyValueSeparator: e.target.value })\n                }\n                placeholder=\"Default is single space\"\n              />\n            </div>\n          )}\n\n          {parameter.parameterType === \"Argument\" && (\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"position\">Position</Label>\n              <Input\n                id=\"position\"\n                type=\"number\"\n                value={parameter.position || 0}\n                onChange={(e) =>\n                  updateParameter({\n                    position: Number.parseInt(e.target.value) || 0\n                  })\n                }\n                placeholder=\"0\"\n              />\n            </div>\n          )}\n\n          <div className=\"flex flex-col gap-2\">\n            <Label>Description</Label>\n            <Textarea\n              value={parameter.description}\n              onChange={(e) => updateParameter({ description: e.target.value })}\n              rows={2}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4 items-center\">\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"defaultValue\">Default Value</Label>\n              <Input\n                id=\"defaultValue\"\n                value={parameter.defaultValue}\n                onChange={(e) =>\n                  updateParameter({ defaultValue: e.target.value })\n                }\n                className={!validation.isValid ? \"border-destructive\" : \"\"}\n              />\n              {!validation.isValid && (\n                <p className=\"text-xs text-destructive mt-1\">\n                  {validation.error}\n                </p>\n              )}\n            </div>\n            <div className=\"flex items-center space-x-4 pt-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"isRequired\"\n                  checked={parameter.isRequired}\n                  onCheckedChange={(checked) =>\n                    updateParameter({ isRequired: checked })\n                  }\n                />\n                <Label htmlFor=\"isRequired\">Required</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"isRepeatable\"\n                  checked={parameter.isRepeatable}\n                  onCheckedChange={(checked) =>\n                    updateParameter({ isRepeatable: checked })\n                  }\n                />\n                <Label htmlFor=\"isRepeatable\">Repeatable</Label>\n              </div>\n            </div>\n          </div>\n\n          <TagsComponent\n            tags={parameter.metadata?.tags || []}\n            onOpenChange={(onOpen, tags) => {\n              if (!onOpen) {\n                updateParameter({ metadata: { tags } });\n              }\n            }}\n          />\n\n          <Separator />\n\n          {/* Dependencies Section */}\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <Label\n                htmlFor=\"dependencies\"\n                className=\"text-base font-medium flex items-center gap-2\"\n              >\n                <LinkIcon className=\"h-4 w-4\" />\n                Dependencies\n              </Label>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={addDependency}\n                disabled={availableParameters.length === 0}\n              >\n                <PlusIcon className=\"h-3 w-3 mr-1\" />\n                Add\n              </Button>\n            </div>\n            <div className=\"space-y-2\" id=\"dependencies\">\n              {parameter.dependencies &&\n                parameter.dependencies.map((dependency) => (\n                  <div\n                    key={dependency.id}\n                    className=\"flex items-center gap-2 p-2 border rounded\"\n                  >\n                    <Select\n                      value={dependency.dependencyType}\n                      onValueChange={(value: ParameterDependencyType) =>\n                        updateDependency(dependency.id, {\n                          dependencyType: value\n                        })\n                      }\n                    >\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"requires\">Requires</SelectItem>\n                        <SelectItem value=\"conflicts_with\">\n                          Conflicts\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Select\n                      value={dependency.dependsOnParameterId}\n                      onValueChange={(value) =>\n                        updateDependency(dependency.id, {\n                          dependsOnParameterId: value\n                        })\n                      }\n                    >\n                      <SelectTrigger className=\"flex-1\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {availableParameters.map((param) => (\n                          <SelectItem key={param.id} value={param.id}>\n                            {param.name}\n                            {param.isGlobal && \" (global)\"}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => removeDependency(dependency.id)}\n                    >\n                      <Trash2Icon className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                ))}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Validations Section */}\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <Label className=\"text-base font-medium flex items-center gap-2\">\n                <ShieldIcon className=\"h-4 w-4\" />\n                Validations\n              </Label>\n              <Button size=\"sm\" variant=\"outline\" onClick={addValidation}>\n                <PlusIcon className=\"h-3 w-3 mr-1\" />\n                Add\n              </Button>\n            </div>\n            <div className=\"space-y-2\">\n              {parameter.validations &&\n                parameter.validations.map((validation) => (\n                  <div\n                    key={validation.id}\n                    className=\"flex items-center gap-2 p-2 border rounded\"\n                  >\n                    <Select\n                      value={validation.validationType}\n                      onValueChange={(value: ParameterValidationType) => {\n                        const updatedValidations = parameter.validations?.map(\n                          (v) =>\n                            v.id === validation.id\n                              ? { ...v, validationType: value }\n                              : v\n                        );\n                        updateParameter({\n                          validations: updatedValidations\n                        });\n                      }}\n                    >\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"min_length\">Min Length</SelectItem>\n                        <SelectItem value=\"max_length\">Max Length</SelectItem>\n                        <SelectItem value=\"min_value\">Min Value</SelectItem>\n                        <SelectItem value=\"max_value\">Max Value</SelectItem>\n                        <SelectItem value=\"regex\">Regex</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Input\n                      value={validation.validationValue}\n                      onChange={(e) => {\n                        const updatedValidations = parameter.validations?.map(\n                          (v) =>\n                            v.id === validation.id\n                              ? { ...v, validationValue: e.target.value }\n                              : v\n                        );\n                        updateParameter({\n                          validations: updatedValidations\n                        });\n                      }}\n                      placeholder=\"Value\"\n                      className=\"flex-1\"\n                    />\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => {\n                        const updatedValidations =\n                          parameter.validations?.filter(\n                            (v) => v.id !== validation.id\n                          );\n                        updateParameter({\n                          validations: updatedValidations\n                        });\n                      }}\n                    >\n                      <Trash2Icon className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                ))}\n            </div>\n          </div>\n\n          {/* Enum Values Section */}\n          {parameter.dataType === \"Enum\" && (\n            <>\n              <Separator />\n              <div>\n                <div className=\"flex items-center justify-between mb-3\">\n                  <Label\n                    htmlFor=\"enum-values\"\n                    className=\"text-base font-medium\"\n                  >\n                    Enum Values\n                  </Label>\n                  <Button size=\"sm\" variant=\"outline\" onClick={addEnumValue}>\n                    <PlusIcon className=\"h-3 w-3 mr-1\" />\n                    Add\n                  </Button>\n                </div>\n                <div className=\"space-y-2\" id=\"enum-values\">\n                  {parameter.enumValues.map((enumValue) => (\n                    <div\n                      key={enumValue.id}\n                      className=\"flex items-center gap-2 p-2 border rounded\"\n                    >\n                      <Input\n                        value={enumValue.value}\n                        onChange={(e) => {\n                          const updatedEnumValues = parameter.enumValues.map(\n                            (ev) =>\n                              ev.id === enumValue.id\n                                ? { ...ev, value: e.target.value }\n                                : ev\n                          );\n                          updateParameter({\n                            enumValues: updatedEnumValues\n                          });\n                        }}\n                        placeholder=\"value\"\n                        className=\"flex-1\"\n                      />\n                      <Input\n                        value={enumValue.displayName}\n                        onChange={(e) => {\n                          const updatedEnumValues = parameter.enumValues.map(\n                            (ev) =>\n                              ev.id === enumValue.id\n                                ? { ...ev, displayName: e.target.value }\n                                : ev\n                          );\n                          updateParameter({\n                            enumValues: updatedEnumValues\n                          });\n                        }}\n                        placeholder=\"Display Name\"\n                        className=\"flex-1\"\n                      />\n                      <Switch\n                        checked={enumValue.isDefault}\n                        onCheckedChange={(checked) => {\n                          const updatedEnumValues = parameter.enumValues.map(\n                            (ev) =>\n                              ev.id === enumValue.id\n                                ? { ...ev, isDefault: checked }\n                                : ev\n                          );\n                          updateParameter({\n                            enumValues: updatedEnumValues\n                          });\n                        }}\n                      />\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => {\n                          const updatedEnumValues = parameter.enumValues.filter(\n                            (ev) => ev.id !== enumValue.id\n                          );\n                          updateParameter({\n                            enumValues: updatedEnumValues\n                          });\n                        }}\n                      >\n                        <Trash2Icon className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleSave} disabled={!canSaveChanges()}>\n            Save Changes\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/commandly/tool-editor/dialogs/exclusion-groups-dialog.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\nimport { ExclusionGroup } from \"@/registry/commandly/lib/types/tool-editor\";\nimport { PlusIcon, TrashIcon } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useStore } from \"@tanstack/react-store\";\nimport {\n  toolBuilderStore,\n  toolBuilderActions,\n  toolBuilderSelectors\n} from \"../tool-editor.store\";\n\nexport function ExclusionGroupsDialog() {\n  const selectedCommand = useStore(\n    toolBuilderStore,\n    (state) => state.selectedCommand\n  );\n  const open = useStore(\n    toolBuilderStore,\n    (state) => state.dialogs.exclusionGroups\n  );\n\n  const exclusionGroups = useStore(toolBuilderStore, (state) => {\n    const commandId = state.selectedCommand?.id;\n    return commandId\n      ? toolBuilderSelectors.getExclusionGroupsForCommand(state, commandId)\n      : [];\n  });\n  const parameters = useStore(toolBuilderStore, (state) => {\n    const commandId = state.selectedCommand?.id;\n    return commandId\n      ? toolBuilderSelectors.getParametersForCommand(state, commandId)\n      : [];\n  });\n\n  const [editingGroup, setEditingGroup] = useState<\n    Partial<ExclusionGroup> | undefined\n  >();\n\n  const handleAddGroup = () => {\n    setEditingGroup({\n      name: \"\",\n      exclusionType: \"mutual_exclusive\",\n      parameterIds: [],\n      commandId: selectedCommand?.id\n    });\n  };\n\n  const handleSaveGroup = () => {\n    if (!editingGroup?.name || !editingGroup.exclusionType) return;\n\n    if (editingGroup.id) {\n      toolBuilderActions.updateExclusionGroup(editingGroup as ExclusionGroup);\n    } else {\n      toolBuilderActions.addExclusionGroup(\n        editingGroup as Omit<ExclusionGroup, \"id\">\n      );\n    }\n    setEditingGroup(undefined);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onOpenChange={(open) =>\n        toolBuilderActions.setDialogOpen(\"exclusionGroups\", open)\n      }\n    >\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Exclusion Groups</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4 mt-4\">\n          {exclusionGroups.map((group) => (\n            <div\n              key={group.id}\n              className=\"p-3 border rounded flex items-center justify-between\"\n            >\n              <div>\n                <h4 className=\"font-medium\">{group.name}</h4>\n                <div className=\"flex gap-1 mt-1\">\n                  {group.parameterIds.map((id) => {\n                    const param = parameters.find((p) => p.id === id);\n                    return (\n                      param && (\n                        <span\n                          key={id}\n                          className=\"text-xs bg-muted px-1.5 py-0.5 rounded\"\n                        >\n                          {param.name}\n                        </span>\n                      )\n                    );\n                  })}\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setEditingGroup(group)}\n                >\n                  Edit\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() =>\n                    toolBuilderActions.removeExclusionGroup(group.id!)\n                  }\n                >\n                  <TrashIcon className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n\n          {!editingGroup && (\n            <Button onClick={handleAddGroup} className=\"w-full\">\n              <PlusIcon className=\"h-4 w-4 mr-2\" />\n              Add Group\n            </Button>\n          )}\n\n          {editingGroup && (\n            <div className=\"space-y-4 border rounded p-4\">\n              <div className=\"space-y-2\">\n                <Label>Name</Label>\n                <Input\n                  value={editingGroup.name}\n                  onChange={(e) =>\n                    setEditingGroup({ ...editingGroup, name: e.target.value })\n                  }\n                  placeholder=\"Group name\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Type</Label>\n                <Select\n                  value={editingGroup.exclusionType}\n                  onValueChange={(value) =>\n                    setEditingGroup({\n                      ...editingGroup,\n                      exclusionType: value as ExclusionGroup[\"exclusionType\"]\n                    })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"mutual_exclusive\">\n                      Mutually Exclusive\n                    </SelectItem>\n                    <SelectItem value=\"required_one_of\">\n                      Required One Of\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Parameters</Label>\n                <Select\n                  value=\"\"\n                  onValueChange={(value) =>\n                    setEditingGroup({\n                      ...editingGroup,\n                      parameterIds: [\n                        ...(editingGroup.parameterIds || []),\n                        value\n                      ]\n                    })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Add parameter\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {parameters\n                      .filter((p) => !editingGroup.parameterIds?.includes(p.id))\n                      .map((param) => (\n                        <SelectItem key={param.id} value={param.id}>\n                          {param.name}\n                        </SelectItem>\n                      ))}\n                  </SelectContent>\n                </Select>\n\n                <div className=\"flex flex-wrap gap-1 mt-2\">\n                  {editingGroup.parameterIds?.map((id) => {\n                    const param = parameters.find((p) => p.id === id);\n                    return (\n                      param && (\n                        <span\n                          key={id}\n                          className=\"flex items-center gap-1 text-sm bg-muted px-2 py-1 rounded\"\n                        >\n                          {param.name}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-4 w-4 p-0\"\n                            onClick={() =>\n                              setEditingGroup({\n                                ...editingGroup,\n                                parameterIds: editingGroup.parameterIds?.filter(\n                                  (pid) => pid !== id\n                                )\n                              })\n                            }\n                          >\n                            <TrashIcon className=\"h-3 w-3\" />\n                          </Button>\n                        </span>\n                      )\n                    );\n                  })}\n                </div>\n              </div>\n\n              <div className=\"flex justify-end gap-2 mt-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setEditingGroup(undefined)}\n                >\n                  Cancel\n                </Button>\n                <Button onClick={handleSaveGroup}>Save</Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/commandly/tool-editor/dialogs/tool-details-dialog.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter\n} from \"@/components/ui/dialog\";\nimport { SettingsIcon } from \"lucide-react\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { MultiSelect } from \"@/components/ui/multi-select\";\nimport {\n  SupportedToolInputType,\n  SupportedToolOutputType\n} from \"@/registry/commandly/lib/types/tool-editor\";\nimport { TagsComponent } from \"@/components/tags\";\nimport { toolBuilderActions, toolBuilderStore } from \"../tool-editor.store\";\n\nconst supportedInputOptions = [\n  { value: \"StandardInput\", label: \"Standard Input\" },\n  { value: \"Parameter\", label: \"Parameter\" }\n];\n\nconst supportedOutputOptions = [\n  { value: \"StandardOutput\", label: \"Standard Output\" },\n  { value: \"File\", label: \"File\" }\n];\n\nexport function ToolDetailsDialog() {\n  const tool = useStore(toolBuilderStore, (state) => state.tool);\n\n  const isOpen = useStore(toolBuilderStore, (state) => state.dialogs.editTool);\n  return (\n    <Dialog\n      open={isOpen}\n      onOpenChange={(open) =>\n        toolBuilderActions.setDialogOpen(\"editTool\", open)\n      }\n    >\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <SettingsIcon className=\"h-5 w-5\" />\n            Edit Tool Settings\n          </DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"flex flex-col gap-3\">\n              <Label htmlFor=\"tool-name-full\">Tool Name</Label>\n              <Input\n                id=\"tool-name-full\"\n                value={tool.name}\n                onChange={(e) => {\n                  const newName = e.target.value;\n                  const prevName = tool.name;\n                  toolBuilderActions.updateTool({\n                    name: newName,\n                    commands: tool.commands.map((cmd) =>\n                      cmd.name === prevName ? { ...cmd, name: newName } : cmd\n                    )\n                  });\n                }}\n              />\n            </div>\n            <div className=\"flex flex-col gap-3\">\n              <Label htmlFor=\"tool-display-name\">Display Name</Label>\n              <Input\n                id=\"tool-display-name\"\n                value={tool.displayName}\n                onChange={(e) =>\n                  toolBuilderActions.updateTool({ displayName: e.target.value })\n                }\n              />\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"flex flex-col gap-3\">\n              <Label htmlFor=\"tool-version-full\">Version</Label>\n              <Input\n                id=\"tool-version-full\"\n                value={tool.version}\n                onChange={(e) =>\n                  toolBuilderActions.updateTool({ version: e.target.value })\n                }\n              />\n            </div>\n            <div className=\"flex flex-col gap-3\">\n              <Label htmlFor=\"tool-category\">Category</Label>\n              <Input\n                id=\"tool-category\"\n                value={tool.category}\n                onChange={(e) =>\n                  toolBuilderActions.updateTool({ category: e.target.value })\n                }\n              />\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"flex flex-col gap-3\">\n              <Label htmlFor=\"tool-name-full\">Supported Input</Label>\n              <MultiSelect\n                options={supportedInputOptions}\n                onValueChange={(value) =>\n                  toolBuilderActions.updateTool({\n                    supportedInput: value.map(\n                      (v) => v as SupportedToolInputType\n                    )\n                  })\n                }\n                defaultValue={tool.supportedInput}\n                placeholder=\"Select input types\"\n                variant=\"default\"\n                maxCount={0}\n              />\n            </div>\n            <div className=\"flex flex-col gap-3\">\n              <Label htmlFor=\"tool-display-name\">Supported Output</Label>\n              <MultiSelect\n                options={supportedOutputOptions}\n                onValueChange={(value) =>\n                  toolBuilderActions.updateTool({\n                    supportedOutput: value.map(\n                      (v) => v as SupportedToolOutputType\n                    )\n                  })\n                }\n                defaultValue={tool.supportedOutput}\n                placeholder=\"Select output types\"\n                variant=\"default\"\n                maxCount={0}\n              />\n            </div>\n          </div>\n          <TagsComponent\n            tags={tool.tags || []}\n            onOpenChange={(onOpen, tags) => {\n              if (!onOpen) {\n                toolBuilderActions.updateTool({ tags });\n              }\n            }}\n          />\n          <div className=\"flex flex-col gap-3\">\n            <Label htmlFor=\"tool-description\">Description</Label>\n            <Textarea\n              id=\"tool-description\"\n              value={tool.description}\n              onChange={(e) =>\n                toolBuilderActions.updateTool({ description: e.target.value })\n              }\n              rows={3}\n            />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={() => toolBuilderActions.setDialogOpen(\"editTool\", false)}\n          >\n            Close\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/commandly/tool-editor/dialogs/command-dialog.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogDescription\n} from \"@/components/ui/dialog\";\nimport { Command } from \"@/registry/commandly/lib/types/tool-editor\";\nimport { TerminalIcon } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { toolBuilderActions, toolBuilderStore } from \"../tool-editor.store\";\n\ninterface CommandDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function CommandDialog({ isOpen, onOpenChange }: CommandDialogProps) {\n  const command = useStore(toolBuilderStore, (state) => state.editingCommand);\n  const toolName = useStore(toolBuilderStore, (state) => state.tool.name);\n  const [editCommand, setCommand] = useState<Command>(command!);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <TerminalIcon className=\"h-5 w-5\" />\n            Edit Command Settings\n          </DialogTitle>\n          <DialogDescription>\n            Dialog for editing command details\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"flex flex-col gap-3\">\n              <Label htmlFor=\"cmd-name\">Command Name</Label>\n              <Input\n                id=\"cmd-name\"\n                value={editCommand.name}\n                disabled={command!.name == toolName}\n                onChange={(e) =>\n                  setCommand((prev) => ({\n                    ...prev,\n                    name: e.target.value\n                  }))\n                }\n              />\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"flex flex-col gap-3\">\n              <Label htmlFor=\"sort-order\">Sort Order</Label>\n              <Input\n                id=\"sort-order\"\n                type=\"number\"\n                value={editCommand.sortOrder}\n                onChange={(e) =>\n                  setCommand((prev) => ({\n                    ...prev,\n                    sortOrder: Number.parseInt(e.target.value) || 0\n                  }))\n                }\n              />\n            </div>\n            <div className=\"flex items-center space-x-2 pt-6\">\n              <Switch\n                id=\"default-cmd\"\n                defaultChecked={editCommand.isDefault}\n                disabled={command?.isDefault}\n                onCheckedChange={(checked) => {\n                  setCommand((prev) => ({\n                    ...prev,\n                    isDefault: checked\n                  }));\n                }}\n              />\n              <Label htmlFor=\"default-cmd\">Default Command</Label>\n            </div>\n          </div>\n          <div className=\"flex flex-col gap-3\">\n            <Label htmlFor=\"cmd-desc\">Description</Label>\n            <Textarea\n              id=\"cmd-desc\"\n              value={editCommand.description}\n              onChange={(e) =>\n                setCommand((prev) => ({ ...prev, description: e.target.value }))\n              }\n              rows={3}\n            />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={() => {\n              toolBuilderActions.updateCommand(editCommand.id, editCommand);\n              onOpenChange(false);\n            }}\n          >\n            Save & Close\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/commandly/tool-editor/dialogs/saved-commands-dialog.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter\n} from \"@/components/ui/dialog\";\nimport { SaveIcon, CopyIcon, Trash2Icon } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { SavedCommand } from \"@/registry/commandly/lib/types/tool-editor\";\nimport { toolBuilderActions, toolBuilderStore } from \"../tool-editor.store\";\nimport { useStore } from \"@tanstack/react-store\";\n\ninterface SavedCommandsDialogProps {\n  savedCommands: SavedCommand[];\n  onDeleteCommand: (commandId: string) => void;\n}\n\nexport function SavedCommandsDialog({\n  savedCommands,\n  onDeleteCommand\n}: SavedCommandsDialogProps) {\n  const copyCommand = (command: string) => {\n    navigator.clipboard.writeText(command);\n    toast(\"Command copied!\");\n  };\n\n  const deleteCommand = (commandId: string) => {\n    onDeleteCommand(commandId);\n    toast(\"Command Removed\", {\n      description: \"Saved command has been removed successfully.\"\n    });\n  };\n\n  const open = useStore(\n    toolBuilderStore,\n    (state) => state.dialogs.savedCommands\n  );\n\n  return (\n    <Dialog\n      open={open}\n      onOpenChange={() =>\n        toolBuilderActions.setDialogOpen(\"savedCommands\", false)\n      }\n    >\n      <DialogContent className=\"max-w-4xl max-h-[80vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <SaveIcon className=\"h-5 w-5\" />\n            Saved Commands\n          </DialogTitle>\n        </DialogHeader>\n\n        {savedCommands.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <SaveIcon className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">\n              No saved commands yet. Generate and save commands to see them\n              here.\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4 overflow-y-auto pr-4 max-h-[calc(80vh-8rem)]\">\n            {savedCommands &&\n              savedCommands.length > 0 &&\n              savedCommands.map((savedCommand) => (\n                <div\n                  key={savedCommand.id}\n                  className=\"p-3 border rounded-lg space-y-3\"\n                >\n                  <div className=\"flex items-center gap-2 justify-end\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => copyCommand(savedCommand.command)}\n                    >\n                      <CopyIcon className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => deleteCommand(savedCommand.id)}\n                    >\n                      <Trash2Icon className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <pre className=\"bg-muted p-3 rounded font-mono text-sm\">\n                    {savedCommand.command}\n                  </pre>\n                </div>\n              ))}\n          </div>\n        )}\n\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={() =>\n              toolBuilderActions.setDialogOpen(\"savedCommands\", false)\n            }\n          >\n            Close\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/commandly/lib/types/tool-editor.ts",
      "content": "import { z } from \"zod/v4\";\n\nexport const CommandSchema = z.object({\n  id: z.uuidv7(),\n  parentCommandId: z.uuidv7().optional(),\n  name: z.string(),\n  description: z.string(),\n  isDefault: z.boolean(),\n  sortOrder: z.number()\n});\nexport type Command = z.infer<typeof CommandSchema>;\n\nexport const ParameterEnumValueSchema = z.object({\n  id: z.uuidv7(),\n  parameterId: z.uuidv7(),\n  value: z.string(),\n  displayName: z.string(),\n  description: z.string(),\n  isDefault: z.boolean(),\n  sortOrder: z.number()\n});\nexport type ParameterEnumValue = z.infer<typeof ParameterEnumValueSchema>;\n\nexport const ParameterValidationTypeSchema = z.enum([\n  \"min_length\",\n  \"max_length\",\n  \"min_value\",\n  \"max_value\",\n  \"regex\"\n]);\nexport type ParameterValidationType = z.infer<\n  typeof ParameterValidationTypeSchema\n>;\n\nexport const ParameterValidationSchema = z.object({\n  id: z.string(),\n  parameterId: z.string(),\n  validationType: ParameterValidationTypeSchema,\n  validationValue: z.string(),\n  errorMessage: z.string()\n});\nexport type ParameterValidation = z.infer<typeof ParameterValidationSchema>;\nexport const ParameterDependencyTypeSchema = z.enum([\n  \"requires\",\n  \"conflicts_with\"\n]);\nexport type ParameterDependencyType = z.infer<\n  typeof ParameterDependencyTypeSchema\n>;\nexport const ParameterDependencySchema = z.object({\n  id: z.string(),\n  parameterId: z.string(),\n  dependsOnParameterId: z.string(),\n  dependencyType: ParameterDependencyTypeSchema,\n  conditionValue: z.string().optional()\n});\n\nexport type ParameterValue = string | number | boolean;\n\nexport type ParameterDependency = z.infer<typeof ParameterDependencySchema>;\n\nexport const ParameterMetadataSchema = z.object({\n  tags: z.array(z.string()).optional()\n});\nexport type ParameterMetadata = z.infer<typeof ParameterMetadataSchema>;\nexport const ParameterTypeSchema = z.enum([\"Flag\", \"Option\", \"Argument\"]);\nexport type ParameterType = z.infer<typeof ParameterTypeSchema>;\n\nexport const ParameterDataTypeSchema = z.enum([\n  \"String\",\n  \"Number\",\n  \"Boolean\",\n  \"Enum\"\n]);\nexport type ParameterDataType = z.infer<typeof ParameterDataTypeSchema>;\n\nexport const ParameterSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  commandId: z.uuidv7().optional(),\n  description: z.string(),\n  metadata: ParameterMetadataSchema.optional(),\n  parameterType: ParameterTypeSchema,\n  dataType: ParameterDataTypeSchema,\n  isRequired: z.boolean(),\n  isRepeatable: z.boolean(),\n  isGlobal: z.boolean(),\n  defaultValue: z.string().optional(),\n  shortFlag: z.string().optional(),\n  longFlag: z.string(),\n  position: z.number().optional(),\n  sortOrder: z.number().optional(),\n  arraySeparator: z.string().optional(),\n  keyValueSeparator: z.string().optional(),\n  enumValues: z.array(ParameterEnumValueSchema),\n  validations: z.array(ParameterValidationSchema).optional(),\n  dependencies: z.array(ParameterDependencySchema).optional()\n});\nexport type Parameter = z.infer<typeof ParameterSchema>;\n\nexport const ExclusionTypeSchema = z.enum([\n  \"mutual_exclusive\",\n  \"required_one_of\"\n]);\nexport type ExclusionType = z.infer<typeof ExclusionTypeSchema>;\n\nexport const ExclusionGroupSchema = z.object({\n  id: z.string().optional(),\n  commandId: z.string().optional(),\n  name: z.string(),\n  exclusionType: ExclusionTypeSchema,\n  parameterIds: z.array(z.string())\n});\nexport type ExclusionGroup = z.infer<typeof ExclusionGroupSchema>;\n\nexport const SavedCommandSchema = z.object({\n  id: z.string(),\n  command: z.string()\n});\nexport type SavedCommand = z.infer<typeof SavedCommandSchema>;\n\nexport const SupportedToolInputTypeSchema = z.enum([\n  \"StandardInput\",\n  \"Parameter\"\n]);\nexport type SupportedToolInputType = z.infer<\n  typeof SupportedToolInputTypeSchema\n>;\n\nexport const SupportedToolOutputTypeSchema = z.enum([\n  \"StandardOutput\",\n  \"File\",\n  \"Directory\"\n]);\nexport type SupportedToolOutputType = z.infer<\n  typeof SupportedToolOutputTypeSchema\n>;\n\nexport const ToolSchema = z.object({\n  id: z.string().optional(),\n  name: z.string(),\n  displayName: z.string(),\n  description: z.string().optional(),\n  version: z.string().optional(),\n  category: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  url: z.url().optional(),\n  commands: z.array(CommandSchema),\n  parameters: z.array(ParameterSchema),\n  exclusionGroups: z.array(ExclusionGroupSchema),\n  supportedInput: z.array(SupportedToolInputTypeSchema),\n  supportedOutput: z.array(SupportedToolOutputTypeSchema)\n});\nexport type Tool = z.infer<typeof ToolSchema>;\n\nexport const AIParseRequestSchema = z.object({\n  helpText: z.string(),\n  toolName: z.string().optional()\n});\nexport type AIParseRequest = z.infer<typeof AIParseRequestSchema>;\n\nexport const AIParseResponseSchema = z.object({\n  success: z.boolean(),\n  data: ToolSchema.optional(),\n  error: z.string().optional()\n});\nexport type AIParseResponse = z.infer<typeof AIParseResponseSchema>;\n\nexport const newToolSchema = z.object({\n  displayName: z.string(),\n  name: z.string(),\n  version: z.string().optional(),\n  description: z.string().optional(),\n  url: z.url().optional()\n});\nexport type ManualNewTool = z.infer<typeof newToolSchema>;\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/commandly/lib/types/tool-editor-nested.ts",
      "content": "import type {\n  ParameterDependencyType,\n  ExclusionType,\n  ParameterDataType,\n  ParameterMetadata,\n  ParameterType,\n  ParameterValidation,\n  SupportedToolInputType,\n  SupportedToolOutputType\n} from \"./tool-editor\";\n\nexport interface NestedCommand {\n  name: string;\n  description: string;\n  isDefault: boolean;\n  sortOrder: number;\n  parameters: NestedParameter[];\n  subcommands: NestedCommand[];\n}\n\nexport interface NestedParameterEnumValue {\n  value: string;\n  displayName: string;\n  description: string;\n  isDefault: boolean;\n  sortOrder: number;\n}\n\nexport type NestedParameterValidation = Omit<\n  ParameterValidation,\n  \"id\" | \"parameterId\"\n>;\n\nexport interface NestedParameterDependency {\n  dependsOnParameter: string;\n  dependencyType: ParameterDependencyType;\n  conditionValue?: string;\n}\n\nexport interface NestedParameter {\n  name: string;\n  description: string;\n  parameterType: ParameterType;\n  dataType: ParameterDataType;\n  metadata?: ParameterMetadata;\n  isRequired: boolean;\n  isRepeatable: boolean;\n  isGlobal: boolean;\n  defaultValue?: string;\n  shortFlag?: string;\n  longFlag: string;\n  position?: number;\n  sortOrder?: number;\n  arraySeparator?: string;\n  keyValueSeparator?: string;\n  enumValues: NestedParameterEnumValue[];\n  validations: NestedParameterValidation[];\n  dependencies: NestedParameterDependency[];\n}\n\nexport interface NestedExclusionGroup {\n  name: string;\n  exclusionType: ExclusionType;\n  parameters: string[];\n}\n\nexport interface NestedTool {\n  name: string;\n  displayName: string;\n  description?: string;\n  version?: string;\n  url: string;\n  globalParameters: NestedParameter[];\n  commands: NestedCommand[];\n  exclusionGroups: NestedExclusionGroup[];\n  supportedInput: SupportedToolInputType[];\n  supportedOutput: SupportedToolOutputType[];\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/commandly/lib/utils/tool-editor.ts",
      "content": "import type {\n  Command,\n  Parameter,\n  SavedCommand,\n  Tool\n} from \"@/registry/commandly/lib/types/tool-editor\";\nimport { v7 as uuidv7 } from \"uuid\";\n\nexport const buildCommandHierarchy = (commands: Command[]): Command[] => {\n  return commands.sort((a, b) => a.sortOrder - b.sortOrder);\n};\n\nexport const getCommandPath = (command: Command, tool: Tool): string => {\n  const findCommandPath = (\n    targetId: string,\n    commands: Command[],\n    path: string[] = []\n  ): string[] | null => {\n    for (const cmd of commands) {\n      if (cmd.name === targetId) {\n        return [...path, cmd.name];\n      }\n\n      const childCommands = commands.filter(\n        (c) => c.parentCommandId === cmd.id\n      );\n      if (childCommands.length > 0) {\n        const subPath = findCommandPath(targetId, childCommands, [\n          ...path,\n          cmd.name\n        ]);\n        if (subPath) {\n          return subPath;\n        }\n      }\n    }\n    return null;\n  };\n\n  const rootCommands = tool.commands.filter((c) => !c.parentCommandId);\n  const path = findCommandPath(command.name, rootCommands);\n\n  if (!path) return command.name;\n\n  if (command.name === tool.name && command.isDefault) {\n    return tool.name;\n  }\n\n  const rootCommand = tool.commands.find((c) => c.name === tool.name);\n  if (rootCommand?.isDefault && path[0] === tool.name) {\n    path[0] = tool.name;\n  }\n\n  return path.join(\" \");\n};\n\nexport const getAllSubcommands = (\n  commandId: string,\n  commands: Command[]\n): Command[] => {\n  const result: Command[] = [];\n\n  const findSubcommands = (parentId: string) => {\n    commands.forEach((cmd) => {\n      if (cmd.parentCommandId === parentId) {\n        result.push(cmd);\n        findSubcommands(cmd.id);\n      }\n    });\n  };\n\n  findSubcommands(commandId);\n  return result;\n};\n\nexport const exportToStructuredJSON = (tool: Tool) => {\n  const flattenCommand = (cmd: Command) => {\n    return { ...cmd };\n  };\n\n  return {\n    name: tool.name,\n    displayName: tool.displayName,\n    description: tool.description,\n    version: tool.version,\n    commands: tool.commands.map(flattenCommand),\n    parameters: tool.parameters,\n    exclusionGroups: tool.exclusionGroups,\n    supportedInput: tool.supportedInput,\n    supportedOutput: tool.supportedOutput\n  };\n};\n\nexport const flattenImportedData = (importedData: any): Tool => {\n  const {\n    name,\n    displayName,\n    parameters = [],\n    commands = [],\n    exclusionGroups = [],\n    supportedInput = [],\n    supportedOutput = []\n  } = importedData;\n\n  const allParameters: Parameter[] = [...parameters];\n\n  const flattenCommandParameters = (\n    command: any,\n    parentId?: string\n  ): Command[] => {\n    const { parameters = [], subcommands = [], ...commandData } = command;\n\n    parameters.forEach((param: any) => {\n      allParameters.push({\n        ...param,\n        commandId: command.id,\n        isGlobal: !command.name\n      });\n    });\n\n    const flatCommand: Command = {\n      ...commandData,\n      parentCommandId: parentId\n    };\n\n    const flatCommands = [flatCommand];\n\n    subcommands.forEach((subcmd: any) => {\n      flatCommands.push(...flattenCommandParameters(subcmd, command.name));\n    });\n\n    return flatCommands;\n  };\n\n  const flatCommands: Command[] = [];\n  commands.forEach((cmd: any) => {\n    flatCommands.push(...flattenCommandParameters(cmd));\n  });\n\n  return {\n    name: name,\n    displayName: displayName || name,\n    commands: flatCommands,\n    parameters: allParameters,\n    exclusionGroups,\n    supportedInput: supportedInput,\n    supportedOutput: supportedOutput\n  };\n};\n\nexport const defaultTool = (toolName?: string, displayName?: string): Tool => {\n  return {\n    name: toolName || \"my-tool\",\n    displayName: displayName || \"My Tool\",\n    description: undefined,\n    version: \"\",\n    commands: [\n      {\n        id: uuidv7(),\n        name: toolName || \"my-tool\",\n        description: \"Main command\",\n        isDefault: true,\n        sortOrder: 0\n      }\n    ],\n    parameters: [\n      {\n        id: \"--help\",\n        name: \"Help\",\n        description: \"Displays help menu of tool\",\n        parameterType: \"Flag\",\n        dataType: \"String\",\n        isRequired: false,\n        isGlobal: true,\n        shortFlag: \"-h\",\n        longFlag: \"--help\",\n        isRepeatable: false,\n        enumValues: [],\n        validations: [],\n        dependencies: []\n      }\n    ],\n    exclusionGroups: [],\n    supportedInput: [\"StandardInput\"],\n    supportedOutput: [\"StandardOutput\"]\n  };\n};\n\nexport const validateDefaultValue = (\n  parameter: Parameter\n): { isValid: boolean; error?: string } => {\n  const { defaultValue, validations, dataType } = parameter;\n\n  if (!defaultValue || !validations) return { isValid: true };\n\n  switch (dataType) {\n    case \"Number\":\n      if (!/^-?\\d+$/.test(defaultValue)) {\n        return { isValid: false, error: \"Default value must be an integer\" };\n      }\n      break;\n    case \"Boolean\":\n      if (![\"true\", \"false\", \"1\", \"0\"].includes(defaultValue.toLowerCase())) {\n        return {\n          isValid: false,\n          error: \"Default value must be true/false or 1/0\"\n        };\n      }\n      break;\n  }\n\n  for (const validation of validations) {\n    const value = dataType === \"Number\" ? Number(defaultValue) : defaultValue;\n\n    switch (validation.validationType) {\n      case \"min_length\":\n        if (\n          typeof value === \"string\" &&\n          value.length < Number(validation.validationValue)\n        ) {\n          return {\n            isValid: false,\n            error: validation.errorMessage || \"Value too short\"\n          };\n        }\n        break;\n      case \"max_length\":\n        if (\n          typeof value === \"string\" &&\n          value.length > Number(validation.validationValue)\n        ) {\n          return {\n            isValid: false,\n            error: validation.errorMessage || \"Value too long\"\n          };\n        }\n        break;\n      case \"min_value\":\n        if (\n          typeof value === \"number\" &&\n          value < Number(validation.validationValue)\n        ) {\n          return {\n            isValid: false,\n            error: validation.errorMessage || \"Value too small\"\n          };\n        }\n        break;\n      case \"max_value\":\n        if (\n          typeof value === \"number\" &&\n          value > Number(validation.validationValue)\n        ) {\n          return {\n            isValid: false,\n            error: validation.errorMessage || \"Value too large\"\n          };\n        }\n        break;\n      case \"regex\":\n        if (\n          typeof value === \"string\" &&\n          !new RegExp(validation.validationValue).test(value)\n        ) {\n          return {\n            isValid: false,\n            error: validation.errorMessage || \"Value doesn't match pattern\"\n          };\n        }\n        break;\n    }\n  }\n\n  return { isValid: true };\n};\n\nexport const createNewCommand = (parentId?: string): Command => {\n  return {\n    id: uuidv7(),\n    parentCommandId: parentId,\n    name: randomCommandName(),\n    description: \"\",\n    isDefault: false,\n    sortOrder: 1\n  };\n};\n\nexport const createNewParameter = (\n  isGlobal: boolean,\n  commandId?: string\n): Parameter => {\n  return {\n    id: uuidv7(),\n    name: \"\",\n    commandId: isGlobal ? undefined : commandId,\n    description: \"\",\n    parameterType: \"Option\",\n    dataType: \"String\",\n    isRequired: false,\n    isRepeatable: false,\n    isGlobal,\n    defaultValue: \"\",\n    shortFlag: \"\",\n    longFlag: \"\",\n    sortOrder: 0,\n    arraySeparator: \",\",\n    keyValueSeparator: \" \",\n    enumValues: [],\n    validations: [],\n    dependencies: []\n  };\n};\n\nexport const getSavedCommandsFromStorage = (toolId: string): SavedCommand[] => {\n  try {\n    const saved = localStorage.getItem(`saved-${toolId}`);\n    return saved ? JSON.parse(saved) : [];\n  } catch {\n    return [];\n  }\n};\n\nexport const saveSavedCommandsToStorage = (\n  toolId: string,\n  commands: SavedCommand[]\n): void => {\n  try {\n    localStorage.setItem(toolId, JSON.stringify(commands));\n  } catch (error) {\n    console.error(\"Failed to save commands to localStorage:\", error);\n  }\n};\n\nexport const addSavedCommandToStorage = (\n  toolId: string,\n  command: SavedCommand\n): void => {\n  const existingCommands = getSavedCommandsFromStorage(toolId);\n  const updatedCommands = [...existingCommands, command];\n  saveSavedCommandsToStorage(toolId, updatedCommands);\n};\n\nexport const removeSavedCommandFromStorage = (\n  toolId: string,\n  commandId: string\n): void => {\n  const existingCommands = getSavedCommandsFromStorage(toolId);\n  const updatedCommands = existingCommands.filter(\n    (cmd) => cmd.id !== commandId\n  );\n  saveSavedCommandsToStorage(toolId, updatedCommands);\n};\n\nexport const clearSavedCommandsFromStorage = (toolId: string): void => {\n  localStorage.removeItem(toolId);\n};\n\nexport const randomCommandName = () => {\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n  let result = \"\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < 7; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport function generateHashCode(s: string): string {\n  let h = 0;\n  for (let i = 0; i < s.length; i++)\n    h = (Math.imul(31, h) + s.charCodeAt(i)) | 0;\n\n  return h.toString();\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/commandly/lib/utils/tool-editor-nested.ts",
      "content": "import type { Tool, Command, Parameter } from \"@/registry/commandly/lib/types/tool-editor\";\nimport type {\n  NestedTool,\n  NestedCommand,\n  NestedParameter,\n  NestedExclusionGroup\n} from \"@/registry/commandly/lib/types/tool-editor-nested\";\n\nexport const convertToNestedStructure = (tool: Tool): NestedTool => {\n  const globalParameters = tool.parameters.filter((p) => p.isGlobal);\n\n  const convertParameter = (param: Parameter): NestedParameter => {\n    const { id, commandId, ...rest } = param;\n    return {\n      ...rest,\n      validations:\n        param.validations?.map((v) => {\n          return {\n            validationType: v.validationType,\n            validationValue: v.validationValue,\n            errorMessage: v.errorMessage\n          };\n        }) || [],\n      metadata: param.metadata,\n      dataType: param.dataType,\n      dependencies:\n        param.dependencies?.map((dep) => {\n          const dependsOnParam = tool.parameters.find(\n            (p) => p.id === dep.dependsOnParameterId\n          );\n          return {\n            dependsOnParameter: dependsOnParam?.longFlag || \"\",\n            dependencyType: dep.dependencyType,\n            conditionValue: dep.conditionValue\n          };\n        }) || []\n    };\n  };\n\n  const buildNestedCommands = (\n    commands: Command[],\n    parentId?: string\n  ): NestedCommand[] => {\n    return commands\n      .filter((cmd) => cmd.parentCommandId === parentId)\n      .map((cmd) => {\n        const commandParameters = tool.parameters.filter(\n          (p) => p.commandId === cmd.id && !p.isGlobal\n        );\n        return {\n          name: cmd.name,\n          description: cmd.description,\n          isDefault: cmd.isDefault,\n          sortOrder: cmd.sortOrder,\n          parameters: commandParameters.map(convertParameter),\n          subcommands: buildNestedCommands(commands, cmd.id)\n        };\n      });\n  };\n\n  const nestedExclusionGroups: NestedExclusionGroup[] =\n    tool.exclusionGroups.map((group) => {\n      return {\n        name: group.name,\n        exclusionType: group.exclusionType,\n        parameters: group.parameterIds.map((pid) => {\n          const param = tool.parameters.find((p) => p.id === pid);\n          return param?.longFlag || \"\";\n        })\n      };\n    });\n\n  return {\n    name: tool.name,\n    displayName: tool.displayName,\n    description: tool.description,\n    version: tool.version,\n    supportedInput: tool.supportedInput,\n    supportedOutput: tool.supportedOutput,\n    globalParameters: globalParameters.map(convertParameter),\n    commands: buildNestedCommands(tool.commands),\n    exclusionGroups: nestedExclusionGroups\n  };\n};\n",
      "type": "registry:lib"
    }
  ]
}
