{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "json-output",
  "type": "registry:component",
  "title": "JSON Output",
  "description": "A component for displaying formatted JSON output with syntax highlighting and copy functionality.",
  "dependencies": ["react"],
  "registryDependencies": ["button", "scroll-area"],
  "files": [
    {
      "path": "registry/commandly/components/json-output.tsx",
      "content": "import { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckIcon, ChevronsUpDownIcon, CopyIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger\n} from \"@/components/ui/popover\";\nimport {\n  Command as UICommand,\n  CommandGroup,\n  CommandItem,\n  CommandList\n} from \"@/components/ui/command\";\nimport {\n  Card,\n  CardAction,\n  CardContent,\n  CardHeader,\n  CardTitle\n} from \"@/components/ui/card\";\nimport { exportToStructuredJSON } from \"@/registry/commandly/lib/utils/tool-editor\";\nimport { convertToNestedStructure } from \"@/registry/commandly/lib/utils/tool-editor-nested\";\nimport { Tool } from \"@/registry/commandly/lib/types/tool-editor\";\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\nimport { toast } from \"sonner\";\nimport { useQueryState } from \"nuqs\";\n\nconst jsonOptions = [\n  { value: \"nested\", label: \"Nested\" },\n  { value: \"flat\", label: \"Flat\" }\n];\n\ninterface JsonTypeComponentProps {\n  tool: Tool;\n}\n\nexport function JsonOutput({ tool }: JsonTypeComponentProps) {\n  const [open, setOpen] = useState(false);\n  const [jsonString, setJsonString] = useState<string>();\n  const [jsonType, setJsonType] = useQueryState(\"output\", {\n    defaultValue: \"flat\"\n  });\n  useEffect(() => {\n    const config =\n      jsonType === \"flat\"\n        ? exportToStructuredJSON(tool)\n        : convertToNestedStructure(tool);\n    setJsonString(JSON.stringify(config, null, 2));\n  }, [jsonType, tool]);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          <span className=\"text-sm\">Output type: </span>\n          <Popover open={open} onOpenChange={setOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                role=\"combobox\"\n                aria-expanded={open}\n                className=\"w-48 justify-between\"\n              >\n                {jsonOptions.find((option) => option.value === jsonType)?.label}\n                <ChevronsUpDownIcon className=\"opacity-50\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-48 p-0\">\n              <UICommand>\n                <CommandList>\n                  <CommandGroup>\n                    {jsonOptions.map((option) => (\n                      <CommandItem\n                        key={option.value}\n                        value={option.value}\n                        onSelect={(currentValue) => {\n                          setJsonType(currentValue);\n                          setOpen(false);\n                        }}\n                      >\n                        {option.label}\n                        <CheckIcon\n                          className={cn(\n                            \"ml-auto h-4 w-4\",\n                            jsonType === option.value\n                              ? \"opacity-100\"\n                              : \"opacity-0\"\n                          )}\n                        />\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </CommandList>\n              </UICommand>\n            </PopoverContent>\n          </Popover>\n        </CardTitle>\n        <CardAction\n          className=\"rounded-md\"\n          onClick={() => {\n            navigator.clipboard.writeText(jsonString!);\n            toast(\"Copied!\");\n          }}\n        >\n          <CopyIcon className=\"h-4 w-4 dark:stroke-primary\" />\n        </CardAction>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea\n          className=\"[&>[data-radix-scroll-area-viewport]]:max-h-[calc(100vh-320px)] max-w-full\"\n          type=\"hover\"\n        >\n          <pre className=\"rounded-md text-sm font-mono bg-card dark:text-gray-200 max-h max-w-full\">\n            {jsonString}\n          </pre>\n          <ScrollBar orientation=\"vertical\" />\n          <ScrollBar orientation=\"horizontal\" />\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}
